Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    ALIGNOF
    AND
    AND_BIT
    AS
    BECOME
    BOX
    BREAK
    BYTE
    CONTINUE
    CRATE
    DIVIDE
    DO
    ELSE
    ENUM
    EXTERN
    FINAL
    IMPL
    INTEGER
    LEFT_MAYUS
    MACRO
    MATH_REMINDER
    MOD
    MOV
    OFFSETOF
    OR
    OR_BIT
    OVERRIDE
    PLUS
    PRINTLN
    PRIV
    PROC
    PUB
    PURE
    QUO_MARKS
    REF
    RETURN
    RIGHT_MAYUS
    SELF
    SIZEOF
    STATIC
    SUPER
    TIMES
    TRAIT
    TYPE
    TYPEOF
    UNSAFE
    UNSIZED
    USE
    VIRTUAL
    WHERE
    WHILE
    XOR_BIT
    YIELD

Grammar

Rule 0     S' -> cuerpo
Rule 1     cuerpo -> asignacion
Rule 2     cuerpo -> struct
Rule 3     cuerpo -> varEnVar
Rule 4     cuerpo -> definirFuncion
Rule 5     cuerpo -> hashMap
Rule 6     cuerpo -> vector
Rule 7     cuerpo -> for
Rule 8     cuerpo -> loop
Rule 9     cuerpo -> eMatch
Rule 10    cuerpo -> condicional
Rule 11    asignacion -> definicion ASSIGN valorAsignado COMMA_DOT
Rule 12    asignacion -> VARIABLE ASSIGN valorAsignado COMMA_DOT
Rule 13    asignacion -> VARIABLE ASSIGN varEnVar COMMA_DOT
Rule 14    asignacion -> definicion
Rule 15    varEnVar -> VARIABLE POINT VARIABLE
Rule 16    definicion -> creacion
Rule 17    definicion -> creacion COMMA_DOT
Rule 18    definicion -> creacion tipoDato
Rule 19    creacion -> LET MUT VARIABLE
Rule 20    creacion -> LET VARIABLE
Rule 21    creacion -> CONST VARIABLE
Rule 22    tipoDato -> TWO_POINTS dato
Rule 23    tipoDato -> TWO_POINTS dato tipoDato
Rule 24    tipoDato -> LESS_THAN dato MORE_THAN
Rule 25    tipoDato -> TWO_POINTS apuntador
Rule 26    dato -> STRING
Rule 27    dato -> CHAR
Rule 28    dato -> DECIMAL
Rule 29    dato -> HEXADECIMAL
Rule 30    dato -> OCTAL
Rule 31    dato -> BINARIO
Rule 32    dato -> BOOL
Rule 33    dato -> FLOAT
Rule 34    dato -> VEC
Rule 35    dato -> GENERIC
Rule 36    valorAsignado -> dato
Rule 37    valorAsignado -> llamadaAfuncion
Rule 38    valorAsignado -> llamadaAfuncionPorAlias
Rule 39    valorAsignado -> vector
Rule 40    valorAsignado -> hashMap
Rule 41    valorAsignado -> VARIABLE
Rule 42    llamadaAfuncionPorAlias -> VARIABLE POINT llamadaAfuncion
Rule 43    llamadaAfuncion -> VARIABLE argumentos
Rule 44    llamadaAfuncion -> VARIABLE argumentos POINT llamadaAfuncion
Rule 45    llamadaAfuncion -> VARIABLE TWO_POINTS TWO_POINTS argumentos
Rule 46    llamadaAfuncion -> VARIABLE TWO_POINTS TWO_POINTS
Rule 47    llamadaAfuncion -> VARIABLE TWO_POINTS TWO_POINTS llamadaAfuncion
Rule 48    argumentos -> LPAREN argumento RPAREN
Rule 49    argumentos -> LPAREN RPAREN
Rule 50    argumento -> VARIABLE
Rule 51    argumento -> dato
Rule 52    argumento -> VARIABLE COMA argumento
Rule 53    argumento -> dato COMA argumento
Rule 54    argumento -> llamadaAfuncion
Rule 55    argumento -> llamadaAfuncionPorAlias
Rule 56    argumento -> llamadaAfuncion COMA argumento
Rule 57    argumento -> llamadaAfuncionPorAlias COMA argumento
Rule 58    definirFuncion -> FN VARIABLE trait parametros LKEY cuerpoFuncion RKEY
Rule 59    definirFuncion -> FN VARIABLE parametros LKEY cuerpoFuncion RKEY
Rule 60    trait -> LESS_THAN GENERIC TWO_POINTS VARIABLE MORE_THAN
Rule 61    datoARetornar -> MINUS MORE_THAN dato
Rule 62    datoARetornar -> MINUS MORE_THAN NOT
Rule 63    parametros -> LPAREN RPAREN datoARetornar
Rule 64    parametros -> LPAREN parametro RPAREN datoARetornar
Rule 65    parametros -> LPAREN RPAREN
Rule 66    parametros -> LPAREN parametro RPAREN
Rule 67    parametro -> VARIABLE TWO_POINTS dato
Rule 68    parametro -> VARIABLE TWO_POINTS dato COMA parametro
Rule 69    parametro -> dato COMA parametro
Rule 70    parametro -> dato
Rule 71    cuerpoFuncion -> cuerpo
Rule 72    struct -> STRUCT VARIABLE LKEY atributos RKEY
Rule 73    atributos -> VARIABLE TWO_POINTS dato
Rule 74    atributos -> VARIABLE TWO_POINTS dato COMA atributos
Rule 75    vector -> VEC NOT LBRACKET datos RBRACKET
Rule 76    datos -> dato
Rule 77    datos -> dato COMA datos
Rule 78    condicional -> IF VARIABLE comparacion VARIABLE LKEY cuerpo RKEY
Rule 79    comparacion -> EQUALS
Rule 80    comparacion -> NOT_EQUALS
Rule 81    comparacion -> LESS_THAN
Rule 82    comparacion -> LESSEQUAL_THAN
Rule 83    comparacion -> MORE_THAN
Rule 84    comparacion -> MOREEQUAL_THAN
Rule 85    hashMap -> HASHMAP TWO_POINTS TWO_POINTS NEW LPAREN RPAREN
Rule 86    for -> FOR VARIABLE IN rango LKEY cuerpoFuncion RKEY
Rule 87    rango -> DECIMAL POINT POINT DECIMAL
Rule 88    rango -> DECIMAL POINT POINT ASSIGN DECIMAL
Rule 89    eMatch -> MATCH VARIABLE LKEY content RKEY
Rule 90    content -> dato MOREEQUAL_THAN cuerpoFuncion
Rule 91    content -> dato MOREEQUAL_THAN cuerpoFuncion COMA content
Rule 92    loop -> LOOP LKEY cuerpoFuncion RKEY
Rule 93    apuntador -> FN parametros

Terminals, with rules where they appear

ABSTRACT             : 
ALIGNOF              : 
AND                  : 
AND_BIT              : 
AS                   : 
ASSIGN               : 11 12 13 88
BECOME               : 
BINARIO              : 31
BOOL                 : 32
BOX                  : 
BREAK                : 
BYTE                 : 
CHAR                 : 27
COMA                 : 52 53 56 57 68 69 74 77 91
COMMA_DOT            : 11 12 13 17
CONST                : 21
CONTINUE             : 
CRATE                : 
DECIMAL              : 28 87 87 88 88
DIVIDE               : 
DO                   : 
ELSE                 : 
ENUM                 : 
EQUALS               : 79
EXTERN               : 
FINAL                : 
FLOAT                : 33
FN                   : 58 59 93
FOR                  : 86
GENERIC              : 35 60
HASHMAP              : 85
HEXADECIMAL          : 29
IF                   : 78
IMPL                 : 
IN                   : 86
INTEGER              : 
LBRACKET             : 75
LEFT_MAYUS           : 
LESSEQUAL_THAN       : 82
LESS_THAN            : 24 60 81
LET                  : 19 20
LKEY                 : 58 59 72 78 86 89 92
LOOP                 : 92
LPAREN               : 48 49 63 64 65 66 85
MACRO                : 
MATCH                : 89
MATH_REMINDER        : 
MINUS                : 61 62
MOD                  : 
MOREEQUAL_THAN       : 84 90 91
MORE_THAN            : 24 60 61 62 83
MOV                  : 
MUT                  : 19
NEW                  : 85
NOT                  : 62 75
NOT_EQUALS           : 80
OCTAL                : 30
OFFSETOF             : 
OR                   : 
OR_BIT               : 
OVERRIDE             : 
PLUS                 : 
POINT                : 15 42 44 87 87 88 88
PRINTLN              : 
PRIV                 : 
PROC                 : 
PUB                  : 
PURE                 : 
QUO_MARKS            : 
RBRACKET             : 75
REF                  : 
RETURN               : 
RIGHT_MAYUS          : 
RKEY                 : 58 59 72 78 86 89 92
RPAREN               : 48 49 63 64 65 66 85
SELF                 : 
SIZEOF               : 
STATIC               : 
STRING               : 26
STRUCT               : 72
SUPER                : 
TIMES                : 
TRAIT                : 
TWO_POINTS           : 22 23 25 45 45 46 46 47 47 60 67 68 73 74 85 85
TYPE                 : 
TYPEOF               : 
UNSAFE               : 
UNSIZED              : 
USE                  : 
VARIABLE             : 12 13 15 15 19 20 21 41 42 43 44 45 46 47 50 52 58 59 60 67 68 72 73 74 78 78 86 89
VEC                  : 34 75
VIRTUAL              : 
WHERE                : 
WHILE                : 
XOR_BIT              : 
YIELD                : 
error                : 

Nonterminals, with rules where they appear

apuntador            : 25
argumento            : 48 52 53 56 57
argumentos           : 43 44 45
asignacion           : 1
atributos            : 72 74
comparacion          : 78
condicional          : 10
content              : 89 91
creacion             : 16 17 18
cuerpo               : 71 78 0
cuerpoFuncion        : 58 59 86 90 91 92
dato                 : 22 23 24 36 51 53 61 67 68 69 70 73 74 76 77 90 91
datoARetornar        : 63 64
datos                : 75 77
definicion           : 11 14
definirFuncion       : 4
eMatch               : 9
for                  : 7
hashMap              : 5 40
llamadaAfuncion      : 37 42 44 47 54 56
llamadaAfuncionPorAlias : 38 55 57
loop                 : 8
parametro            : 64 66 68 69
parametros           : 58 59 93
rango                : 86
struct               : 2
tipoDato             : 18 23
trait                : 58
valorAsignado        : 11 12
varEnVar             : 3 13
vector               : 6 39

Parsing method: LALR

state 0

    (0) S' -> . cuerpo
    (1) cuerpo -> . asignacion
    (2) cuerpo -> . struct
    (3) cuerpo -> . varEnVar
    (4) cuerpo -> . definirFuncion
    (5) cuerpo -> . hashMap
    (6) cuerpo -> . vector
    (7) cuerpo -> . for
    (8) cuerpo -> . loop
    (9) cuerpo -> . eMatch
    (10) cuerpo -> . condicional
    (11) asignacion -> . definicion ASSIGN valorAsignado COMMA_DOT
    (12) asignacion -> . VARIABLE ASSIGN valorAsignado COMMA_DOT
    (13) asignacion -> . VARIABLE ASSIGN varEnVar COMMA_DOT
    (14) asignacion -> . definicion
    (72) struct -> . STRUCT VARIABLE LKEY atributos RKEY
    (15) varEnVar -> . VARIABLE POINT VARIABLE
    (58) definirFuncion -> . FN VARIABLE trait parametros LKEY cuerpoFuncion RKEY
    (59) definirFuncion -> . FN VARIABLE parametros LKEY cuerpoFuncion RKEY
    (85) hashMap -> . HASHMAP TWO_POINTS TWO_POINTS NEW LPAREN RPAREN
    (75) vector -> . VEC NOT LBRACKET datos RBRACKET
    (86) for -> . FOR VARIABLE IN rango LKEY cuerpoFuncion RKEY
    (92) loop -> . LOOP LKEY cuerpoFuncion RKEY
    (89) eMatch -> . MATCH VARIABLE LKEY content RKEY
    (78) condicional -> . IF VARIABLE comparacion VARIABLE LKEY cuerpo RKEY
    (16) definicion -> . creacion
    (17) definicion -> . creacion COMMA_DOT
    (18) definicion -> . creacion tipoDato
    (19) creacion -> . LET MUT VARIABLE
    (20) creacion -> . LET VARIABLE
    (21) creacion -> . CONST VARIABLE

    VARIABLE        shift and go to state 13
    STRUCT          shift and go to state 14
    FN              shift and go to state 15
    HASHMAP         shift and go to state 16
    VEC             shift and go to state 17
    FOR             shift and go to state 18
    LOOP            shift and go to state 19
    MATCH           shift and go to state 20
    IF              shift and go to state 21
    LET             shift and go to state 23
    CONST           shift and go to state 24

    cuerpo                         shift and go to state 1
    asignacion                     shift and go to state 2
    struct                         shift and go to state 3
    varEnVar                       shift and go to state 4
    definirFuncion                 shift and go to state 5
    hashMap                        shift and go to state 6
    vector                         shift and go to state 7
    for                            shift and go to state 8
    loop                           shift and go to state 9
    eMatch                         shift and go to state 10
    condicional                    shift and go to state 11
    definicion                     shift and go to state 12
    creacion                       shift and go to state 22

state 1

    (0) S' -> cuerpo .



state 2

    (1) cuerpo -> asignacion .

    $end            reduce using rule 1 (cuerpo -> asignacion .)
    RKEY            reduce using rule 1 (cuerpo -> asignacion .)
    COMA            reduce using rule 1 (cuerpo -> asignacion .)


state 3

    (2) cuerpo -> struct .

    $end            reduce using rule 2 (cuerpo -> struct .)
    RKEY            reduce using rule 2 (cuerpo -> struct .)
    COMA            reduce using rule 2 (cuerpo -> struct .)


state 4

    (3) cuerpo -> varEnVar .

    $end            reduce using rule 3 (cuerpo -> varEnVar .)
    RKEY            reduce using rule 3 (cuerpo -> varEnVar .)
    COMA            reduce using rule 3 (cuerpo -> varEnVar .)


state 5

    (4) cuerpo -> definirFuncion .

    $end            reduce using rule 4 (cuerpo -> definirFuncion .)
    RKEY            reduce using rule 4 (cuerpo -> definirFuncion .)
    COMA            reduce using rule 4 (cuerpo -> definirFuncion .)


state 6

    (5) cuerpo -> hashMap .

    $end            reduce using rule 5 (cuerpo -> hashMap .)
    RKEY            reduce using rule 5 (cuerpo -> hashMap .)
    COMA            reduce using rule 5 (cuerpo -> hashMap .)


state 7

    (6) cuerpo -> vector .

    $end            reduce using rule 6 (cuerpo -> vector .)
    RKEY            reduce using rule 6 (cuerpo -> vector .)
    COMA            reduce using rule 6 (cuerpo -> vector .)


state 8

    (7) cuerpo -> for .

    $end            reduce using rule 7 (cuerpo -> for .)
    RKEY            reduce using rule 7 (cuerpo -> for .)
    COMA            reduce using rule 7 (cuerpo -> for .)


state 9

    (8) cuerpo -> loop .

    $end            reduce using rule 8 (cuerpo -> loop .)
    RKEY            reduce using rule 8 (cuerpo -> loop .)
    COMA            reduce using rule 8 (cuerpo -> loop .)


state 10

    (9) cuerpo -> eMatch .

    $end            reduce using rule 9 (cuerpo -> eMatch .)
    RKEY            reduce using rule 9 (cuerpo -> eMatch .)
    COMA            reduce using rule 9 (cuerpo -> eMatch .)


state 11

    (10) cuerpo -> condicional .

    $end            reduce using rule 10 (cuerpo -> condicional .)
    RKEY            reduce using rule 10 (cuerpo -> condicional .)
    COMA            reduce using rule 10 (cuerpo -> condicional .)


state 12

    (11) asignacion -> definicion . ASSIGN valorAsignado COMMA_DOT
    (14) asignacion -> definicion .

    ASSIGN          shift and go to state 25
    $end            reduce using rule 14 (asignacion -> definicion .)
    RKEY            reduce using rule 14 (asignacion -> definicion .)
    COMA            reduce using rule 14 (asignacion -> definicion .)


state 13

    (12) asignacion -> VARIABLE . ASSIGN valorAsignado COMMA_DOT
    (13) asignacion -> VARIABLE . ASSIGN varEnVar COMMA_DOT
    (15) varEnVar -> VARIABLE . POINT VARIABLE

    ASSIGN          shift and go to state 26
    POINT           shift and go to state 27


state 14

    (72) struct -> STRUCT . VARIABLE LKEY atributos RKEY

    VARIABLE        shift and go to state 28


state 15

    (58) definirFuncion -> FN . VARIABLE trait parametros LKEY cuerpoFuncion RKEY
    (59) definirFuncion -> FN . VARIABLE parametros LKEY cuerpoFuncion RKEY

    VARIABLE        shift and go to state 29


state 16

    (85) hashMap -> HASHMAP . TWO_POINTS TWO_POINTS NEW LPAREN RPAREN

    TWO_POINTS      shift and go to state 30


state 17

    (75) vector -> VEC . NOT LBRACKET datos RBRACKET

    NOT             shift and go to state 31


state 18

    (86) for -> FOR . VARIABLE IN rango LKEY cuerpoFuncion RKEY

    VARIABLE        shift and go to state 32


state 19

    (92) loop -> LOOP . LKEY cuerpoFuncion RKEY

    LKEY            shift and go to state 33


state 20

    (89) eMatch -> MATCH . VARIABLE LKEY content RKEY

    VARIABLE        shift and go to state 34


state 21

    (78) condicional -> IF . VARIABLE comparacion VARIABLE LKEY cuerpo RKEY

    VARIABLE        shift and go to state 35


state 22

    (16) definicion -> creacion .
    (17) definicion -> creacion . COMMA_DOT
    (18) definicion -> creacion . tipoDato
    (22) tipoDato -> . TWO_POINTS dato
    (23) tipoDato -> . TWO_POINTS dato tipoDato
    (24) tipoDato -> . LESS_THAN dato MORE_THAN
    (25) tipoDato -> . TWO_POINTS apuntador

    ASSIGN          reduce using rule 16 (definicion -> creacion .)
    $end            reduce using rule 16 (definicion -> creacion .)
    RKEY            reduce using rule 16 (definicion -> creacion .)
    COMA            reduce using rule 16 (definicion -> creacion .)
    COMMA_DOT       shift and go to state 36
    TWO_POINTS      shift and go to state 38
    LESS_THAN       shift and go to state 39

    tipoDato                       shift and go to state 37

state 23

    (19) creacion -> LET . MUT VARIABLE
    (20) creacion -> LET . VARIABLE

    MUT             shift and go to state 40
    VARIABLE        shift and go to state 41


state 24

    (21) creacion -> CONST . VARIABLE

    VARIABLE        shift and go to state 42


state 25

    (11) asignacion -> definicion ASSIGN . valorAsignado COMMA_DOT
    (36) valorAsignado -> . dato
    (37) valorAsignado -> . llamadaAfuncion
    (38) valorAsignado -> . llamadaAfuncionPorAlias
    (39) valorAsignado -> . vector
    (40) valorAsignado -> . hashMap
    (41) valorAsignado -> . VARIABLE
    (26) dato -> . STRING
    (27) dato -> . CHAR
    (28) dato -> . DECIMAL
    (29) dato -> . HEXADECIMAL
    (30) dato -> . OCTAL
    (31) dato -> . BINARIO
    (32) dato -> . BOOL
    (33) dato -> . FLOAT
    (34) dato -> . VEC
    (35) dato -> . GENERIC
    (43) llamadaAfuncion -> . VARIABLE argumentos
    (44) llamadaAfuncion -> . VARIABLE argumentos POINT llamadaAfuncion
    (45) llamadaAfuncion -> . VARIABLE TWO_POINTS TWO_POINTS argumentos
    (46) llamadaAfuncion -> . VARIABLE TWO_POINTS TWO_POINTS
    (47) llamadaAfuncion -> . VARIABLE TWO_POINTS TWO_POINTS llamadaAfuncion
    (42) llamadaAfuncionPorAlias -> . VARIABLE POINT llamadaAfuncion
    (75) vector -> . VEC NOT LBRACKET datos RBRACKET
    (85) hashMap -> . HASHMAP TWO_POINTS TWO_POINTS NEW LPAREN RPAREN

    VARIABLE        shift and go to state 49
    STRING          shift and go to state 50
    CHAR            shift and go to state 51
    DECIMAL         shift and go to state 52
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 54
    BINARIO         shift and go to state 55
    BOOL            shift and go to state 56
    FLOAT           shift and go to state 57
    VEC             shift and go to state 58
    GENERIC         shift and go to state 59
    HASHMAP         shift and go to state 16

    valorAsignado                  shift and go to state 43
    dato                           shift and go to state 44
    llamadaAfuncion                shift and go to state 45
    llamadaAfuncionPorAlias        shift and go to state 46
    vector                         shift and go to state 47
    hashMap                        shift and go to state 48

state 26

    (12) asignacion -> VARIABLE ASSIGN . valorAsignado COMMA_DOT
    (13) asignacion -> VARIABLE ASSIGN . varEnVar COMMA_DOT
    (36) valorAsignado -> . dato
    (37) valorAsignado -> . llamadaAfuncion
    (38) valorAsignado -> . llamadaAfuncionPorAlias
    (39) valorAsignado -> . vector
    (40) valorAsignado -> . hashMap
    (41) valorAsignado -> . VARIABLE
    (15) varEnVar -> . VARIABLE POINT VARIABLE
    (26) dato -> . STRING
    (27) dato -> . CHAR
    (28) dato -> . DECIMAL
    (29) dato -> . HEXADECIMAL
    (30) dato -> . OCTAL
    (31) dato -> . BINARIO
    (32) dato -> . BOOL
    (33) dato -> . FLOAT
    (34) dato -> . VEC
    (35) dato -> . GENERIC
    (43) llamadaAfuncion -> . VARIABLE argumentos
    (44) llamadaAfuncion -> . VARIABLE argumentos POINT llamadaAfuncion
    (45) llamadaAfuncion -> . VARIABLE TWO_POINTS TWO_POINTS argumentos
    (46) llamadaAfuncion -> . VARIABLE TWO_POINTS TWO_POINTS
    (47) llamadaAfuncion -> . VARIABLE TWO_POINTS TWO_POINTS llamadaAfuncion
    (42) llamadaAfuncionPorAlias -> . VARIABLE POINT llamadaAfuncion
    (75) vector -> . VEC NOT LBRACKET datos RBRACKET
    (85) hashMap -> . HASHMAP TWO_POINTS TWO_POINTS NEW LPAREN RPAREN

    VARIABLE        shift and go to state 60
    STRING          shift and go to state 50
    CHAR            shift and go to state 51
    DECIMAL         shift and go to state 52
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 54
    BINARIO         shift and go to state 55
    BOOL            shift and go to state 56
    FLOAT           shift and go to state 57
    VEC             shift and go to state 58
    GENERIC         shift and go to state 59
    HASHMAP         shift and go to state 16

    valorAsignado                  shift and go to state 61
    varEnVar                       shift and go to state 62
    dato                           shift and go to state 44
    llamadaAfuncion                shift and go to state 45
    llamadaAfuncionPorAlias        shift and go to state 46
    vector                         shift and go to state 47
    hashMap                        shift and go to state 48

state 27

    (15) varEnVar -> VARIABLE POINT . VARIABLE

    VARIABLE        shift and go to state 63


state 28

    (72) struct -> STRUCT VARIABLE . LKEY atributos RKEY

    LKEY            shift and go to state 64


state 29

    (58) definirFuncion -> FN VARIABLE . trait parametros LKEY cuerpoFuncion RKEY
    (59) definirFuncion -> FN VARIABLE . parametros LKEY cuerpoFuncion RKEY
    (60) trait -> . LESS_THAN GENERIC TWO_POINTS VARIABLE MORE_THAN
    (63) parametros -> . LPAREN RPAREN datoARetornar
    (64) parametros -> . LPAREN parametro RPAREN datoARetornar
    (65) parametros -> . LPAREN RPAREN
    (66) parametros -> . LPAREN parametro RPAREN

    LESS_THAN       shift and go to state 67
    LPAREN          shift and go to state 68

    trait                          shift and go to state 65
    parametros                     shift and go to state 66

state 30

    (85) hashMap -> HASHMAP TWO_POINTS . TWO_POINTS NEW LPAREN RPAREN

    TWO_POINTS      shift and go to state 69


state 31

    (75) vector -> VEC NOT . LBRACKET datos RBRACKET

    LBRACKET        shift and go to state 70


state 32

    (86) for -> FOR VARIABLE . IN rango LKEY cuerpoFuncion RKEY

    IN              shift and go to state 71


state 33

    (92) loop -> LOOP LKEY . cuerpoFuncion RKEY
    (71) cuerpoFuncion -> . cuerpo
    (1) cuerpo -> . asignacion
    (2) cuerpo -> . struct
    (3) cuerpo -> . varEnVar
    (4) cuerpo -> . definirFuncion
    (5) cuerpo -> . hashMap
    (6) cuerpo -> . vector
    (7) cuerpo -> . for
    (8) cuerpo -> . loop
    (9) cuerpo -> . eMatch
    (10) cuerpo -> . condicional
    (11) asignacion -> . definicion ASSIGN valorAsignado COMMA_DOT
    (12) asignacion -> . VARIABLE ASSIGN valorAsignado COMMA_DOT
    (13) asignacion -> . VARIABLE ASSIGN varEnVar COMMA_DOT
    (14) asignacion -> . definicion
    (72) struct -> . STRUCT VARIABLE LKEY atributos RKEY
    (15) varEnVar -> . VARIABLE POINT VARIABLE
    (58) definirFuncion -> . FN VARIABLE trait parametros LKEY cuerpoFuncion RKEY
    (59) definirFuncion -> . FN VARIABLE parametros LKEY cuerpoFuncion RKEY
    (85) hashMap -> . HASHMAP TWO_POINTS TWO_POINTS NEW LPAREN RPAREN
    (75) vector -> . VEC NOT LBRACKET datos RBRACKET
    (86) for -> . FOR VARIABLE IN rango LKEY cuerpoFuncion RKEY
    (92) loop -> . LOOP LKEY cuerpoFuncion RKEY
    (89) eMatch -> . MATCH VARIABLE LKEY content RKEY
    (78) condicional -> . IF VARIABLE comparacion VARIABLE LKEY cuerpo RKEY
    (16) definicion -> . creacion
    (17) definicion -> . creacion COMMA_DOT
    (18) definicion -> . creacion tipoDato
    (19) creacion -> . LET MUT VARIABLE
    (20) creacion -> . LET VARIABLE
    (21) creacion -> . CONST VARIABLE

    VARIABLE        shift and go to state 13
    STRUCT          shift and go to state 14
    FN              shift and go to state 15
    HASHMAP         shift and go to state 16
    VEC             shift and go to state 17
    FOR             shift and go to state 18
    LOOP            shift and go to state 19
    MATCH           shift and go to state 20
    IF              shift and go to state 21
    LET             shift and go to state 23
    CONST           shift and go to state 24

    cuerpoFuncion                  shift and go to state 72
    cuerpo                         shift and go to state 73
    asignacion                     shift and go to state 2
    struct                         shift and go to state 3
    varEnVar                       shift and go to state 4
    definirFuncion                 shift and go to state 5
    hashMap                        shift and go to state 6
    vector                         shift and go to state 7
    for                            shift and go to state 8
    loop                           shift and go to state 9
    eMatch                         shift and go to state 10
    condicional                    shift and go to state 11
    definicion                     shift and go to state 12
    creacion                       shift and go to state 22

state 34

    (89) eMatch -> MATCH VARIABLE . LKEY content RKEY

    LKEY            shift and go to state 74


state 35

    (78) condicional -> IF VARIABLE . comparacion VARIABLE LKEY cuerpo RKEY
    (79) comparacion -> . EQUALS
    (80) comparacion -> . NOT_EQUALS
    (81) comparacion -> . LESS_THAN
    (82) comparacion -> . LESSEQUAL_THAN
    (83) comparacion -> . MORE_THAN
    (84) comparacion -> . MOREEQUAL_THAN

    EQUALS          shift and go to state 76
    NOT_EQUALS      shift and go to state 77
    LESS_THAN       shift and go to state 78
    LESSEQUAL_THAN  shift and go to state 79
    MORE_THAN       shift and go to state 80
    MOREEQUAL_THAN  shift and go to state 81

    comparacion                    shift and go to state 75

state 36

    (17) definicion -> creacion COMMA_DOT .

    ASSIGN          reduce using rule 17 (definicion -> creacion COMMA_DOT .)
    $end            reduce using rule 17 (definicion -> creacion COMMA_DOT .)
    RKEY            reduce using rule 17 (definicion -> creacion COMMA_DOT .)
    COMA            reduce using rule 17 (definicion -> creacion COMMA_DOT .)


state 37

    (18) definicion -> creacion tipoDato .

    ASSIGN          reduce using rule 18 (definicion -> creacion tipoDato .)
    $end            reduce using rule 18 (definicion -> creacion tipoDato .)
    RKEY            reduce using rule 18 (definicion -> creacion tipoDato .)
    COMA            reduce using rule 18 (definicion -> creacion tipoDato .)


state 38

    (22) tipoDato -> TWO_POINTS . dato
    (23) tipoDato -> TWO_POINTS . dato tipoDato
    (25) tipoDato -> TWO_POINTS . apuntador
    (26) dato -> . STRING
    (27) dato -> . CHAR
    (28) dato -> . DECIMAL
    (29) dato -> . HEXADECIMAL
    (30) dato -> . OCTAL
    (31) dato -> . BINARIO
    (32) dato -> . BOOL
    (33) dato -> . FLOAT
    (34) dato -> . VEC
    (35) dato -> . GENERIC
    (93) apuntador -> . FN parametros

    STRING          shift and go to state 50
    CHAR            shift and go to state 51
    DECIMAL         shift and go to state 52
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 54
    BINARIO         shift and go to state 55
    BOOL            shift and go to state 56
    FLOAT           shift and go to state 57
    VEC             shift and go to state 84
    GENERIC         shift and go to state 59
    FN              shift and go to state 85

    dato                           shift and go to state 82
    apuntador                      shift and go to state 83

state 39

    (24) tipoDato -> LESS_THAN . dato MORE_THAN
    (26) dato -> . STRING
    (27) dato -> . CHAR
    (28) dato -> . DECIMAL
    (29) dato -> . HEXADECIMAL
    (30) dato -> . OCTAL
    (31) dato -> . BINARIO
    (32) dato -> . BOOL
    (33) dato -> . FLOAT
    (34) dato -> . VEC
    (35) dato -> . GENERIC

    STRING          shift and go to state 50
    CHAR            shift and go to state 51
    DECIMAL         shift and go to state 52
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 54
    BINARIO         shift and go to state 55
    BOOL            shift and go to state 56
    FLOAT           shift and go to state 57
    VEC             shift and go to state 84
    GENERIC         shift and go to state 59

    dato                           shift and go to state 86

state 40

    (19) creacion -> LET MUT . VARIABLE

    VARIABLE        shift and go to state 87


state 41

    (20) creacion -> LET VARIABLE .

    COMMA_DOT       reduce using rule 20 (creacion -> LET VARIABLE .)
    TWO_POINTS      reduce using rule 20 (creacion -> LET VARIABLE .)
    LESS_THAN       reduce using rule 20 (creacion -> LET VARIABLE .)
    ASSIGN          reduce using rule 20 (creacion -> LET VARIABLE .)
    $end            reduce using rule 20 (creacion -> LET VARIABLE .)
    RKEY            reduce using rule 20 (creacion -> LET VARIABLE .)
    COMA            reduce using rule 20 (creacion -> LET VARIABLE .)


state 42

    (21) creacion -> CONST VARIABLE .

    COMMA_DOT       reduce using rule 21 (creacion -> CONST VARIABLE .)
    TWO_POINTS      reduce using rule 21 (creacion -> CONST VARIABLE .)
    LESS_THAN       reduce using rule 21 (creacion -> CONST VARIABLE .)
    ASSIGN          reduce using rule 21 (creacion -> CONST VARIABLE .)
    $end            reduce using rule 21 (creacion -> CONST VARIABLE .)
    RKEY            reduce using rule 21 (creacion -> CONST VARIABLE .)
    COMA            reduce using rule 21 (creacion -> CONST VARIABLE .)


state 43

    (11) asignacion -> definicion ASSIGN valorAsignado . COMMA_DOT

    COMMA_DOT       shift and go to state 88


state 44

    (36) valorAsignado -> dato .

    COMMA_DOT       reduce using rule 36 (valorAsignado -> dato .)


state 45

    (37) valorAsignado -> llamadaAfuncion .

    COMMA_DOT       reduce using rule 37 (valorAsignado -> llamadaAfuncion .)


state 46

    (38) valorAsignado -> llamadaAfuncionPorAlias .

    COMMA_DOT       reduce using rule 38 (valorAsignado -> llamadaAfuncionPorAlias .)


state 47

    (39) valorAsignado -> vector .

    COMMA_DOT       reduce using rule 39 (valorAsignado -> vector .)


state 48

    (40) valorAsignado -> hashMap .

    COMMA_DOT       reduce using rule 40 (valorAsignado -> hashMap .)


state 49

    (41) valorAsignado -> VARIABLE .
    (43) llamadaAfuncion -> VARIABLE . argumentos
    (44) llamadaAfuncion -> VARIABLE . argumentos POINT llamadaAfuncion
    (45) llamadaAfuncion -> VARIABLE . TWO_POINTS TWO_POINTS argumentos
    (46) llamadaAfuncion -> VARIABLE . TWO_POINTS TWO_POINTS
    (47) llamadaAfuncion -> VARIABLE . TWO_POINTS TWO_POINTS llamadaAfuncion
    (42) llamadaAfuncionPorAlias -> VARIABLE . POINT llamadaAfuncion
    (48) argumentos -> . LPAREN argumento RPAREN
    (49) argumentos -> . LPAREN RPAREN

    COMMA_DOT       reduce using rule 41 (valorAsignado -> VARIABLE .)
    TWO_POINTS      shift and go to state 91
    POINT           shift and go to state 90
    LPAREN          shift and go to state 92

    argumentos                     shift and go to state 89

state 50

    (26) dato -> STRING .

    COMMA_DOT       reduce using rule 26 (dato -> STRING .)
    TWO_POINTS      reduce using rule 26 (dato -> STRING .)
    LESS_THAN       reduce using rule 26 (dato -> STRING .)
    ASSIGN          reduce using rule 26 (dato -> STRING .)
    $end            reduce using rule 26 (dato -> STRING .)
    RKEY            reduce using rule 26 (dato -> STRING .)
    COMA            reduce using rule 26 (dato -> STRING .)
    MORE_THAN       reduce using rule 26 (dato -> STRING .)
    RPAREN          reduce using rule 26 (dato -> STRING .)
    RBRACKET        reduce using rule 26 (dato -> STRING .)
    MOREEQUAL_THAN  reduce using rule 26 (dato -> STRING .)
    LKEY            reduce using rule 26 (dato -> STRING .)


state 51

    (27) dato -> CHAR .

    COMMA_DOT       reduce using rule 27 (dato -> CHAR .)
    TWO_POINTS      reduce using rule 27 (dato -> CHAR .)
    LESS_THAN       reduce using rule 27 (dato -> CHAR .)
    ASSIGN          reduce using rule 27 (dato -> CHAR .)
    $end            reduce using rule 27 (dato -> CHAR .)
    RKEY            reduce using rule 27 (dato -> CHAR .)
    COMA            reduce using rule 27 (dato -> CHAR .)
    MORE_THAN       reduce using rule 27 (dato -> CHAR .)
    RPAREN          reduce using rule 27 (dato -> CHAR .)
    RBRACKET        reduce using rule 27 (dato -> CHAR .)
    MOREEQUAL_THAN  reduce using rule 27 (dato -> CHAR .)
    LKEY            reduce using rule 27 (dato -> CHAR .)


state 52

    (28) dato -> DECIMAL .

    COMMA_DOT       reduce using rule 28 (dato -> DECIMAL .)
    TWO_POINTS      reduce using rule 28 (dato -> DECIMAL .)
    LESS_THAN       reduce using rule 28 (dato -> DECIMAL .)
    ASSIGN          reduce using rule 28 (dato -> DECIMAL .)
    $end            reduce using rule 28 (dato -> DECIMAL .)
    RKEY            reduce using rule 28 (dato -> DECIMAL .)
    COMA            reduce using rule 28 (dato -> DECIMAL .)
    MORE_THAN       reduce using rule 28 (dato -> DECIMAL .)
    RPAREN          reduce using rule 28 (dato -> DECIMAL .)
    RBRACKET        reduce using rule 28 (dato -> DECIMAL .)
    MOREEQUAL_THAN  reduce using rule 28 (dato -> DECIMAL .)
    LKEY            reduce using rule 28 (dato -> DECIMAL .)


state 53

    (29) dato -> HEXADECIMAL .

    COMMA_DOT       reduce using rule 29 (dato -> HEXADECIMAL .)
    TWO_POINTS      reduce using rule 29 (dato -> HEXADECIMAL .)
    LESS_THAN       reduce using rule 29 (dato -> HEXADECIMAL .)
    ASSIGN          reduce using rule 29 (dato -> HEXADECIMAL .)
    $end            reduce using rule 29 (dato -> HEXADECIMAL .)
    RKEY            reduce using rule 29 (dato -> HEXADECIMAL .)
    COMA            reduce using rule 29 (dato -> HEXADECIMAL .)
    MORE_THAN       reduce using rule 29 (dato -> HEXADECIMAL .)
    RPAREN          reduce using rule 29 (dato -> HEXADECIMAL .)
    RBRACKET        reduce using rule 29 (dato -> HEXADECIMAL .)
    MOREEQUAL_THAN  reduce using rule 29 (dato -> HEXADECIMAL .)
    LKEY            reduce using rule 29 (dato -> HEXADECIMAL .)


state 54

    (30) dato -> OCTAL .

    COMMA_DOT       reduce using rule 30 (dato -> OCTAL .)
    TWO_POINTS      reduce using rule 30 (dato -> OCTAL .)
    LESS_THAN       reduce using rule 30 (dato -> OCTAL .)
    ASSIGN          reduce using rule 30 (dato -> OCTAL .)
    $end            reduce using rule 30 (dato -> OCTAL .)
    RKEY            reduce using rule 30 (dato -> OCTAL .)
    COMA            reduce using rule 30 (dato -> OCTAL .)
    MORE_THAN       reduce using rule 30 (dato -> OCTAL .)
    RPAREN          reduce using rule 30 (dato -> OCTAL .)
    RBRACKET        reduce using rule 30 (dato -> OCTAL .)
    MOREEQUAL_THAN  reduce using rule 30 (dato -> OCTAL .)
    LKEY            reduce using rule 30 (dato -> OCTAL .)


state 55

    (31) dato -> BINARIO .

    COMMA_DOT       reduce using rule 31 (dato -> BINARIO .)
    TWO_POINTS      reduce using rule 31 (dato -> BINARIO .)
    LESS_THAN       reduce using rule 31 (dato -> BINARIO .)
    ASSIGN          reduce using rule 31 (dato -> BINARIO .)
    $end            reduce using rule 31 (dato -> BINARIO .)
    RKEY            reduce using rule 31 (dato -> BINARIO .)
    COMA            reduce using rule 31 (dato -> BINARIO .)
    MORE_THAN       reduce using rule 31 (dato -> BINARIO .)
    RPAREN          reduce using rule 31 (dato -> BINARIO .)
    RBRACKET        reduce using rule 31 (dato -> BINARIO .)
    MOREEQUAL_THAN  reduce using rule 31 (dato -> BINARIO .)
    LKEY            reduce using rule 31 (dato -> BINARIO .)


state 56

    (32) dato -> BOOL .

    COMMA_DOT       reduce using rule 32 (dato -> BOOL .)
    TWO_POINTS      reduce using rule 32 (dato -> BOOL .)
    LESS_THAN       reduce using rule 32 (dato -> BOOL .)
    ASSIGN          reduce using rule 32 (dato -> BOOL .)
    $end            reduce using rule 32 (dato -> BOOL .)
    RKEY            reduce using rule 32 (dato -> BOOL .)
    COMA            reduce using rule 32 (dato -> BOOL .)
    MORE_THAN       reduce using rule 32 (dato -> BOOL .)
    RPAREN          reduce using rule 32 (dato -> BOOL .)
    RBRACKET        reduce using rule 32 (dato -> BOOL .)
    MOREEQUAL_THAN  reduce using rule 32 (dato -> BOOL .)
    LKEY            reduce using rule 32 (dato -> BOOL .)


state 57

    (33) dato -> FLOAT .

    COMMA_DOT       reduce using rule 33 (dato -> FLOAT .)
    TWO_POINTS      reduce using rule 33 (dato -> FLOAT .)
    LESS_THAN       reduce using rule 33 (dato -> FLOAT .)
    ASSIGN          reduce using rule 33 (dato -> FLOAT .)
    $end            reduce using rule 33 (dato -> FLOAT .)
    RKEY            reduce using rule 33 (dato -> FLOAT .)
    COMA            reduce using rule 33 (dato -> FLOAT .)
    MORE_THAN       reduce using rule 33 (dato -> FLOAT .)
    RPAREN          reduce using rule 33 (dato -> FLOAT .)
    RBRACKET        reduce using rule 33 (dato -> FLOAT .)
    MOREEQUAL_THAN  reduce using rule 33 (dato -> FLOAT .)
    LKEY            reduce using rule 33 (dato -> FLOAT .)


state 58

    (34) dato -> VEC .
    (75) vector -> VEC . NOT LBRACKET datos RBRACKET

    COMMA_DOT       reduce using rule 34 (dato -> VEC .)
    NOT             shift and go to state 31


state 59

    (35) dato -> GENERIC .

    COMMA_DOT       reduce using rule 35 (dato -> GENERIC .)
    TWO_POINTS      reduce using rule 35 (dato -> GENERIC .)
    LESS_THAN       reduce using rule 35 (dato -> GENERIC .)
    ASSIGN          reduce using rule 35 (dato -> GENERIC .)
    $end            reduce using rule 35 (dato -> GENERIC .)
    RKEY            reduce using rule 35 (dato -> GENERIC .)
    COMA            reduce using rule 35 (dato -> GENERIC .)
    MORE_THAN       reduce using rule 35 (dato -> GENERIC .)
    RPAREN          reduce using rule 35 (dato -> GENERIC .)
    RBRACKET        reduce using rule 35 (dato -> GENERIC .)
    MOREEQUAL_THAN  reduce using rule 35 (dato -> GENERIC .)
    LKEY            reduce using rule 35 (dato -> GENERIC .)


state 60

    (41) valorAsignado -> VARIABLE .
    (15) varEnVar -> VARIABLE . POINT VARIABLE
    (43) llamadaAfuncion -> VARIABLE . argumentos
    (44) llamadaAfuncion -> VARIABLE . argumentos POINT llamadaAfuncion
    (45) llamadaAfuncion -> VARIABLE . TWO_POINTS TWO_POINTS argumentos
    (46) llamadaAfuncion -> VARIABLE . TWO_POINTS TWO_POINTS
    (47) llamadaAfuncion -> VARIABLE . TWO_POINTS TWO_POINTS llamadaAfuncion
    (42) llamadaAfuncionPorAlias -> VARIABLE . POINT llamadaAfuncion
    (48) argumentos -> . LPAREN argumento RPAREN
    (49) argumentos -> . LPAREN RPAREN

    COMMA_DOT       reduce using rule 41 (valorAsignado -> VARIABLE .)
    POINT           shift and go to state 93
    TWO_POINTS      shift and go to state 91
    LPAREN          shift and go to state 92

    argumentos                     shift and go to state 89

state 61

    (12) asignacion -> VARIABLE ASSIGN valorAsignado . COMMA_DOT

    COMMA_DOT       shift and go to state 94


state 62

    (13) asignacion -> VARIABLE ASSIGN varEnVar . COMMA_DOT

    COMMA_DOT       shift and go to state 95


state 63

    (15) varEnVar -> VARIABLE POINT VARIABLE .

    $end            reduce using rule 15 (varEnVar -> VARIABLE POINT VARIABLE .)
    RKEY            reduce using rule 15 (varEnVar -> VARIABLE POINT VARIABLE .)
    COMA            reduce using rule 15 (varEnVar -> VARIABLE POINT VARIABLE .)


state 64

    (72) struct -> STRUCT VARIABLE LKEY . atributos RKEY
    (73) atributos -> . VARIABLE TWO_POINTS dato
    (74) atributos -> . VARIABLE TWO_POINTS dato COMA atributos

    VARIABLE        shift and go to state 96

    atributos                      shift and go to state 97

state 65

    (58) definirFuncion -> FN VARIABLE trait . parametros LKEY cuerpoFuncion RKEY
    (63) parametros -> . LPAREN RPAREN datoARetornar
    (64) parametros -> . LPAREN parametro RPAREN datoARetornar
    (65) parametros -> . LPAREN RPAREN
    (66) parametros -> . LPAREN parametro RPAREN

    LPAREN          shift and go to state 68

    parametros                     shift and go to state 98

state 66

    (59) definirFuncion -> FN VARIABLE parametros . LKEY cuerpoFuncion RKEY

    LKEY            shift and go to state 99


state 67

    (60) trait -> LESS_THAN . GENERIC TWO_POINTS VARIABLE MORE_THAN

    GENERIC         shift and go to state 100


state 68

    (63) parametros -> LPAREN . RPAREN datoARetornar
    (64) parametros -> LPAREN . parametro RPAREN datoARetornar
    (65) parametros -> LPAREN . RPAREN
    (66) parametros -> LPAREN . parametro RPAREN
    (67) parametro -> . VARIABLE TWO_POINTS dato
    (68) parametro -> . VARIABLE TWO_POINTS dato COMA parametro
    (69) parametro -> . dato COMA parametro
    (70) parametro -> . dato
    (26) dato -> . STRING
    (27) dato -> . CHAR
    (28) dato -> . DECIMAL
    (29) dato -> . HEXADECIMAL
    (30) dato -> . OCTAL
    (31) dato -> . BINARIO
    (32) dato -> . BOOL
    (33) dato -> . FLOAT
    (34) dato -> . VEC
    (35) dato -> . GENERIC

    RPAREN          shift and go to state 101
    VARIABLE        shift and go to state 103
    STRING          shift and go to state 50
    CHAR            shift and go to state 51
    DECIMAL         shift and go to state 52
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 54
    BINARIO         shift and go to state 55
    BOOL            shift and go to state 56
    FLOAT           shift and go to state 57
    VEC             shift and go to state 84
    GENERIC         shift and go to state 59

    parametro                      shift and go to state 102
    dato                           shift and go to state 104

state 69

    (85) hashMap -> HASHMAP TWO_POINTS TWO_POINTS . NEW LPAREN RPAREN

    NEW             shift and go to state 105


state 70

    (75) vector -> VEC NOT LBRACKET . datos RBRACKET
    (76) datos -> . dato
    (77) datos -> . dato COMA datos
    (26) dato -> . STRING
    (27) dato -> . CHAR
    (28) dato -> . DECIMAL
    (29) dato -> . HEXADECIMAL
    (30) dato -> . OCTAL
    (31) dato -> . BINARIO
    (32) dato -> . BOOL
    (33) dato -> . FLOAT
    (34) dato -> . VEC
    (35) dato -> . GENERIC

    STRING          shift and go to state 50
    CHAR            shift and go to state 51
    DECIMAL         shift and go to state 52
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 54
    BINARIO         shift and go to state 55
    BOOL            shift and go to state 56
    FLOAT           shift and go to state 57
    VEC             shift and go to state 84
    GENERIC         shift and go to state 59

    datos                          shift and go to state 106
    dato                           shift and go to state 107

state 71

    (86) for -> FOR VARIABLE IN . rango LKEY cuerpoFuncion RKEY
    (87) rango -> . DECIMAL POINT POINT DECIMAL
    (88) rango -> . DECIMAL POINT POINT ASSIGN DECIMAL

    DECIMAL         shift and go to state 109

    rango                          shift and go to state 108

state 72

    (92) loop -> LOOP LKEY cuerpoFuncion . RKEY

    RKEY            shift and go to state 110


state 73

    (71) cuerpoFuncion -> cuerpo .

    RKEY            reduce using rule 71 (cuerpoFuncion -> cuerpo .)
    COMA            reduce using rule 71 (cuerpoFuncion -> cuerpo .)


state 74

    (89) eMatch -> MATCH VARIABLE LKEY . content RKEY
    (90) content -> . dato MOREEQUAL_THAN cuerpoFuncion
    (91) content -> . dato MOREEQUAL_THAN cuerpoFuncion COMA content
    (26) dato -> . STRING
    (27) dato -> . CHAR
    (28) dato -> . DECIMAL
    (29) dato -> . HEXADECIMAL
    (30) dato -> . OCTAL
    (31) dato -> . BINARIO
    (32) dato -> . BOOL
    (33) dato -> . FLOAT
    (34) dato -> . VEC
    (35) dato -> . GENERIC

    STRING          shift and go to state 50
    CHAR            shift and go to state 51
    DECIMAL         shift and go to state 52
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 54
    BINARIO         shift and go to state 55
    BOOL            shift and go to state 56
    FLOAT           shift and go to state 57
    VEC             shift and go to state 84
    GENERIC         shift and go to state 59

    content                        shift and go to state 111
    dato                           shift and go to state 112

state 75

    (78) condicional -> IF VARIABLE comparacion . VARIABLE LKEY cuerpo RKEY

    VARIABLE        shift and go to state 113


state 76

    (79) comparacion -> EQUALS .

    VARIABLE        reduce using rule 79 (comparacion -> EQUALS .)


state 77

    (80) comparacion -> NOT_EQUALS .

    VARIABLE        reduce using rule 80 (comparacion -> NOT_EQUALS .)


state 78

    (81) comparacion -> LESS_THAN .

    VARIABLE        reduce using rule 81 (comparacion -> LESS_THAN .)


state 79

    (82) comparacion -> LESSEQUAL_THAN .

    VARIABLE        reduce using rule 82 (comparacion -> LESSEQUAL_THAN .)


state 80

    (83) comparacion -> MORE_THAN .

    VARIABLE        reduce using rule 83 (comparacion -> MORE_THAN .)


state 81

    (84) comparacion -> MOREEQUAL_THAN .

    VARIABLE        reduce using rule 84 (comparacion -> MOREEQUAL_THAN .)


state 82

    (22) tipoDato -> TWO_POINTS dato .
    (23) tipoDato -> TWO_POINTS dato . tipoDato
    (22) tipoDato -> . TWO_POINTS dato
    (23) tipoDato -> . TWO_POINTS dato tipoDato
    (24) tipoDato -> . LESS_THAN dato MORE_THAN
    (25) tipoDato -> . TWO_POINTS apuntador

    ASSIGN          reduce using rule 22 (tipoDato -> TWO_POINTS dato .)
    $end            reduce using rule 22 (tipoDato -> TWO_POINTS dato .)
    RKEY            reduce using rule 22 (tipoDato -> TWO_POINTS dato .)
    COMA            reduce using rule 22 (tipoDato -> TWO_POINTS dato .)
    TWO_POINTS      shift and go to state 38
    LESS_THAN       shift and go to state 39

    tipoDato                       shift and go to state 114

state 83

    (25) tipoDato -> TWO_POINTS apuntador .

    ASSIGN          reduce using rule 25 (tipoDato -> TWO_POINTS apuntador .)
    $end            reduce using rule 25 (tipoDato -> TWO_POINTS apuntador .)
    RKEY            reduce using rule 25 (tipoDato -> TWO_POINTS apuntador .)
    COMA            reduce using rule 25 (tipoDato -> TWO_POINTS apuntador .)


state 84

    (34) dato -> VEC .

    TWO_POINTS      reduce using rule 34 (dato -> VEC .)
    LESS_THAN       reduce using rule 34 (dato -> VEC .)
    ASSIGN          reduce using rule 34 (dato -> VEC .)
    $end            reduce using rule 34 (dato -> VEC .)
    RKEY            reduce using rule 34 (dato -> VEC .)
    COMA            reduce using rule 34 (dato -> VEC .)
    MORE_THAN       reduce using rule 34 (dato -> VEC .)
    RPAREN          reduce using rule 34 (dato -> VEC .)
    RBRACKET        reduce using rule 34 (dato -> VEC .)
    MOREEQUAL_THAN  reduce using rule 34 (dato -> VEC .)
    LKEY            reduce using rule 34 (dato -> VEC .)


state 85

    (93) apuntador -> FN . parametros
    (63) parametros -> . LPAREN RPAREN datoARetornar
    (64) parametros -> . LPAREN parametro RPAREN datoARetornar
    (65) parametros -> . LPAREN RPAREN
    (66) parametros -> . LPAREN parametro RPAREN

    LPAREN          shift and go to state 68

    parametros                     shift and go to state 115

state 86

    (24) tipoDato -> LESS_THAN dato . MORE_THAN

    MORE_THAN       shift and go to state 116


state 87

    (19) creacion -> LET MUT VARIABLE .

    COMMA_DOT       reduce using rule 19 (creacion -> LET MUT VARIABLE .)
    TWO_POINTS      reduce using rule 19 (creacion -> LET MUT VARIABLE .)
    LESS_THAN       reduce using rule 19 (creacion -> LET MUT VARIABLE .)
    ASSIGN          reduce using rule 19 (creacion -> LET MUT VARIABLE .)
    $end            reduce using rule 19 (creacion -> LET MUT VARIABLE .)
    RKEY            reduce using rule 19 (creacion -> LET MUT VARIABLE .)
    COMA            reduce using rule 19 (creacion -> LET MUT VARIABLE .)


state 88

    (11) asignacion -> definicion ASSIGN valorAsignado COMMA_DOT .

    $end            reduce using rule 11 (asignacion -> definicion ASSIGN valorAsignado COMMA_DOT .)
    RKEY            reduce using rule 11 (asignacion -> definicion ASSIGN valorAsignado COMMA_DOT .)
    COMA            reduce using rule 11 (asignacion -> definicion ASSIGN valorAsignado COMMA_DOT .)


state 89

    (43) llamadaAfuncion -> VARIABLE argumentos .
    (44) llamadaAfuncion -> VARIABLE argumentos . POINT llamadaAfuncion

    COMMA_DOT       reduce using rule 43 (llamadaAfuncion -> VARIABLE argumentos .)
    COMA            reduce using rule 43 (llamadaAfuncion -> VARIABLE argumentos .)
    RPAREN          reduce using rule 43 (llamadaAfuncion -> VARIABLE argumentos .)
    POINT           shift and go to state 117


state 90

    (42) llamadaAfuncionPorAlias -> VARIABLE POINT . llamadaAfuncion
    (43) llamadaAfuncion -> . VARIABLE argumentos
    (44) llamadaAfuncion -> . VARIABLE argumentos POINT llamadaAfuncion
    (45) llamadaAfuncion -> . VARIABLE TWO_POINTS TWO_POINTS argumentos
    (46) llamadaAfuncion -> . VARIABLE TWO_POINTS TWO_POINTS
    (47) llamadaAfuncion -> . VARIABLE TWO_POINTS TWO_POINTS llamadaAfuncion

    VARIABLE        shift and go to state 118

    llamadaAfuncion                shift and go to state 119

state 91

    (45) llamadaAfuncion -> VARIABLE TWO_POINTS . TWO_POINTS argumentos
    (46) llamadaAfuncion -> VARIABLE TWO_POINTS . TWO_POINTS
    (47) llamadaAfuncion -> VARIABLE TWO_POINTS . TWO_POINTS llamadaAfuncion

    TWO_POINTS      shift and go to state 120


state 92

    (48) argumentos -> LPAREN . argumento RPAREN
    (49) argumentos -> LPAREN . RPAREN
    (50) argumento -> . VARIABLE
    (51) argumento -> . dato
    (52) argumento -> . VARIABLE COMA argumento
    (53) argumento -> . dato COMA argumento
    (54) argumento -> . llamadaAfuncion
    (55) argumento -> . llamadaAfuncionPorAlias
    (56) argumento -> . llamadaAfuncion COMA argumento
    (57) argumento -> . llamadaAfuncionPorAlias COMA argumento
    (26) dato -> . STRING
    (27) dato -> . CHAR
    (28) dato -> . DECIMAL
    (29) dato -> . HEXADECIMAL
    (30) dato -> . OCTAL
    (31) dato -> . BINARIO
    (32) dato -> . BOOL
    (33) dato -> . FLOAT
    (34) dato -> . VEC
    (35) dato -> . GENERIC
    (43) llamadaAfuncion -> . VARIABLE argumentos
    (44) llamadaAfuncion -> . VARIABLE argumentos POINT llamadaAfuncion
    (45) llamadaAfuncion -> . VARIABLE TWO_POINTS TWO_POINTS argumentos
    (46) llamadaAfuncion -> . VARIABLE TWO_POINTS TWO_POINTS
    (47) llamadaAfuncion -> . VARIABLE TWO_POINTS TWO_POINTS llamadaAfuncion
    (42) llamadaAfuncionPorAlias -> . VARIABLE POINT llamadaAfuncion

    RPAREN          shift and go to state 122
    VARIABLE        shift and go to state 123
    STRING          shift and go to state 50
    CHAR            shift and go to state 51
    DECIMAL         shift and go to state 52
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 54
    BINARIO         shift and go to state 55
    BOOL            shift and go to state 56
    FLOAT           shift and go to state 57
    VEC             shift and go to state 84
    GENERIC         shift and go to state 59

    argumento                      shift and go to state 121
    dato                           shift and go to state 124
    llamadaAfuncion                shift and go to state 125
    llamadaAfuncionPorAlias        shift and go to state 126

state 93

    (15) varEnVar -> VARIABLE POINT . VARIABLE
    (42) llamadaAfuncionPorAlias -> VARIABLE POINT . llamadaAfuncion
    (43) llamadaAfuncion -> . VARIABLE argumentos
    (44) llamadaAfuncion -> . VARIABLE argumentos POINT llamadaAfuncion
    (45) llamadaAfuncion -> . VARIABLE TWO_POINTS TWO_POINTS argumentos
    (46) llamadaAfuncion -> . VARIABLE TWO_POINTS TWO_POINTS
    (47) llamadaAfuncion -> . VARIABLE TWO_POINTS TWO_POINTS llamadaAfuncion

    VARIABLE        shift and go to state 127

    llamadaAfuncion                shift and go to state 119

state 94

    (12) asignacion -> VARIABLE ASSIGN valorAsignado COMMA_DOT .

    $end            reduce using rule 12 (asignacion -> VARIABLE ASSIGN valorAsignado COMMA_DOT .)
    RKEY            reduce using rule 12 (asignacion -> VARIABLE ASSIGN valorAsignado COMMA_DOT .)
    COMA            reduce using rule 12 (asignacion -> VARIABLE ASSIGN valorAsignado COMMA_DOT .)


state 95

    (13) asignacion -> VARIABLE ASSIGN varEnVar COMMA_DOT .

    $end            reduce using rule 13 (asignacion -> VARIABLE ASSIGN varEnVar COMMA_DOT .)
    RKEY            reduce using rule 13 (asignacion -> VARIABLE ASSIGN varEnVar COMMA_DOT .)
    COMA            reduce using rule 13 (asignacion -> VARIABLE ASSIGN varEnVar COMMA_DOT .)


state 96

    (73) atributos -> VARIABLE . TWO_POINTS dato
    (74) atributos -> VARIABLE . TWO_POINTS dato COMA atributos

    TWO_POINTS      shift and go to state 128


state 97

    (72) struct -> STRUCT VARIABLE LKEY atributos . RKEY

    RKEY            shift and go to state 129


state 98

    (58) definirFuncion -> FN VARIABLE trait parametros . LKEY cuerpoFuncion RKEY

    LKEY            shift and go to state 130


state 99

    (59) definirFuncion -> FN VARIABLE parametros LKEY . cuerpoFuncion RKEY
    (71) cuerpoFuncion -> . cuerpo
    (1) cuerpo -> . asignacion
    (2) cuerpo -> . struct
    (3) cuerpo -> . varEnVar
    (4) cuerpo -> . definirFuncion
    (5) cuerpo -> . hashMap
    (6) cuerpo -> . vector
    (7) cuerpo -> . for
    (8) cuerpo -> . loop
    (9) cuerpo -> . eMatch
    (10) cuerpo -> . condicional
    (11) asignacion -> . definicion ASSIGN valorAsignado COMMA_DOT
    (12) asignacion -> . VARIABLE ASSIGN valorAsignado COMMA_DOT
    (13) asignacion -> . VARIABLE ASSIGN varEnVar COMMA_DOT
    (14) asignacion -> . definicion
    (72) struct -> . STRUCT VARIABLE LKEY atributos RKEY
    (15) varEnVar -> . VARIABLE POINT VARIABLE
    (58) definirFuncion -> . FN VARIABLE trait parametros LKEY cuerpoFuncion RKEY
    (59) definirFuncion -> . FN VARIABLE parametros LKEY cuerpoFuncion RKEY
    (85) hashMap -> . HASHMAP TWO_POINTS TWO_POINTS NEW LPAREN RPAREN
    (75) vector -> . VEC NOT LBRACKET datos RBRACKET
    (86) for -> . FOR VARIABLE IN rango LKEY cuerpoFuncion RKEY
    (92) loop -> . LOOP LKEY cuerpoFuncion RKEY
    (89) eMatch -> . MATCH VARIABLE LKEY content RKEY
    (78) condicional -> . IF VARIABLE comparacion VARIABLE LKEY cuerpo RKEY
    (16) definicion -> . creacion
    (17) definicion -> . creacion COMMA_DOT
    (18) definicion -> . creacion tipoDato
    (19) creacion -> . LET MUT VARIABLE
    (20) creacion -> . LET VARIABLE
    (21) creacion -> . CONST VARIABLE

    VARIABLE        shift and go to state 13
    STRUCT          shift and go to state 14
    FN              shift and go to state 15
    HASHMAP         shift and go to state 16
    VEC             shift and go to state 17
    FOR             shift and go to state 18
    LOOP            shift and go to state 19
    MATCH           shift and go to state 20
    IF              shift and go to state 21
    LET             shift and go to state 23
    CONST           shift and go to state 24

    cuerpoFuncion                  shift and go to state 131
    cuerpo                         shift and go to state 73
    asignacion                     shift and go to state 2
    struct                         shift and go to state 3
    varEnVar                       shift and go to state 4
    definirFuncion                 shift and go to state 5
    hashMap                        shift and go to state 6
    vector                         shift and go to state 7
    for                            shift and go to state 8
    loop                           shift and go to state 9
    eMatch                         shift and go to state 10
    condicional                    shift and go to state 11
    definicion                     shift and go to state 12
    creacion                       shift and go to state 22

state 100

    (60) trait -> LESS_THAN GENERIC . TWO_POINTS VARIABLE MORE_THAN

    TWO_POINTS      shift and go to state 132


state 101

    (63) parametros -> LPAREN RPAREN . datoARetornar
    (65) parametros -> LPAREN RPAREN .
    (61) datoARetornar -> . MINUS MORE_THAN dato
    (62) datoARetornar -> . MINUS MORE_THAN NOT

    LKEY            reduce using rule 65 (parametros -> LPAREN RPAREN .)
    ASSIGN          reduce using rule 65 (parametros -> LPAREN RPAREN .)
    $end            reduce using rule 65 (parametros -> LPAREN RPAREN .)
    RKEY            reduce using rule 65 (parametros -> LPAREN RPAREN .)
    COMA            reduce using rule 65 (parametros -> LPAREN RPAREN .)
    MINUS           shift and go to state 134

    datoARetornar                  shift and go to state 133

state 102

    (64) parametros -> LPAREN parametro . RPAREN datoARetornar
    (66) parametros -> LPAREN parametro . RPAREN

    RPAREN          shift and go to state 135


state 103

    (67) parametro -> VARIABLE . TWO_POINTS dato
    (68) parametro -> VARIABLE . TWO_POINTS dato COMA parametro

    TWO_POINTS      shift and go to state 136


state 104

    (69) parametro -> dato . COMA parametro
    (70) parametro -> dato .

    COMA            shift and go to state 137
    RPAREN          reduce using rule 70 (parametro -> dato .)


state 105

    (85) hashMap -> HASHMAP TWO_POINTS TWO_POINTS NEW . LPAREN RPAREN

    LPAREN          shift and go to state 138


state 106

    (75) vector -> VEC NOT LBRACKET datos . RBRACKET

    RBRACKET        shift and go to state 139


state 107

    (76) datos -> dato .
    (77) datos -> dato . COMA datos

    RBRACKET        reduce using rule 76 (datos -> dato .)
    COMA            shift and go to state 140


state 108

    (86) for -> FOR VARIABLE IN rango . LKEY cuerpoFuncion RKEY

    LKEY            shift and go to state 141


state 109

    (87) rango -> DECIMAL . POINT POINT DECIMAL
    (88) rango -> DECIMAL . POINT POINT ASSIGN DECIMAL

    POINT           shift and go to state 142


state 110

    (92) loop -> LOOP LKEY cuerpoFuncion RKEY .

    $end            reduce using rule 92 (loop -> LOOP LKEY cuerpoFuncion RKEY .)
    RKEY            reduce using rule 92 (loop -> LOOP LKEY cuerpoFuncion RKEY .)
    COMA            reduce using rule 92 (loop -> LOOP LKEY cuerpoFuncion RKEY .)


state 111

    (89) eMatch -> MATCH VARIABLE LKEY content . RKEY

    RKEY            shift and go to state 143


state 112

    (90) content -> dato . MOREEQUAL_THAN cuerpoFuncion
    (91) content -> dato . MOREEQUAL_THAN cuerpoFuncion COMA content

    MOREEQUAL_THAN  shift and go to state 144


state 113

    (78) condicional -> IF VARIABLE comparacion VARIABLE . LKEY cuerpo RKEY

    LKEY            shift and go to state 145


state 114

    (23) tipoDato -> TWO_POINTS dato tipoDato .

    ASSIGN          reduce using rule 23 (tipoDato -> TWO_POINTS dato tipoDato .)
    $end            reduce using rule 23 (tipoDato -> TWO_POINTS dato tipoDato .)
    RKEY            reduce using rule 23 (tipoDato -> TWO_POINTS dato tipoDato .)
    COMA            reduce using rule 23 (tipoDato -> TWO_POINTS dato tipoDato .)


state 115

    (93) apuntador -> FN parametros .

    ASSIGN          reduce using rule 93 (apuntador -> FN parametros .)
    $end            reduce using rule 93 (apuntador -> FN parametros .)
    RKEY            reduce using rule 93 (apuntador -> FN parametros .)
    COMA            reduce using rule 93 (apuntador -> FN parametros .)


state 116

    (24) tipoDato -> LESS_THAN dato MORE_THAN .

    ASSIGN          reduce using rule 24 (tipoDato -> LESS_THAN dato MORE_THAN .)
    $end            reduce using rule 24 (tipoDato -> LESS_THAN dato MORE_THAN .)
    RKEY            reduce using rule 24 (tipoDato -> LESS_THAN dato MORE_THAN .)
    COMA            reduce using rule 24 (tipoDato -> LESS_THAN dato MORE_THAN .)


state 117

    (44) llamadaAfuncion -> VARIABLE argumentos POINT . llamadaAfuncion
    (43) llamadaAfuncion -> . VARIABLE argumentos
    (44) llamadaAfuncion -> . VARIABLE argumentos POINT llamadaAfuncion
    (45) llamadaAfuncion -> . VARIABLE TWO_POINTS TWO_POINTS argumentos
    (46) llamadaAfuncion -> . VARIABLE TWO_POINTS TWO_POINTS
    (47) llamadaAfuncion -> . VARIABLE TWO_POINTS TWO_POINTS llamadaAfuncion

    VARIABLE        shift and go to state 118

    llamadaAfuncion                shift and go to state 146

state 118

    (43) llamadaAfuncion -> VARIABLE . argumentos
    (44) llamadaAfuncion -> VARIABLE . argumentos POINT llamadaAfuncion
    (45) llamadaAfuncion -> VARIABLE . TWO_POINTS TWO_POINTS argumentos
    (46) llamadaAfuncion -> VARIABLE . TWO_POINTS TWO_POINTS
    (47) llamadaAfuncion -> VARIABLE . TWO_POINTS TWO_POINTS llamadaAfuncion
    (48) argumentos -> . LPAREN argumento RPAREN
    (49) argumentos -> . LPAREN RPAREN

    TWO_POINTS      shift and go to state 91
    LPAREN          shift and go to state 92

    argumentos                     shift and go to state 89

state 119

    (42) llamadaAfuncionPorAlias -> VARIABLE POINT llamadaAfuncion .

    COMMA_DOT       reduce using rule 42 (llamadaAfuncionPorAlias -> VARIABLE POINT llamadaAfuncion .)
    COMA            reduce using rule 42 (llamadaAfuncionPorAlias -> VARIABLE POINT llamadaAfuncion .)
    RPAREN          reduce using rule 42 (llamadaAfuncionPorAlias -> VARIABLE POINT llamadaAfuncion .)


state 120

    (45) llamadaAfuncion -> VARIABLE TWO_POINTS TWO_POINTS . argumentos
    (46) llamadaAfuncion -> VARIABLE TWO_POINTS TWO_POINTS .
    (47) llamadaAfuncion -> VARIABLE TWO_POINTS TWO_POINTS . llamadaAfuncion
    (48) argumentos -> . LPAREN argumento RPAREN
    (49) argumentos -> . LPAREN RPAREN
    (43) llamadaAfuncion -> . VARIABLE argumentos
    (44) llamadaAfuncion -> . VARIABLE argumentos POINT llamadaAfuncion
    (45) llamadaAfuncion -> . VARIABLE TWO_POINTS TWO_POINTS argumentos
    (46) llamadaAfuncion -> . VARIABLE TWO_POINTS TWO_POINTS
    (47) llamadaAfuncion -> . VARIABLE TWO_POINTS TWO_POINTS llamadaAfuncion

    COMMA_DOT       reduce using rule 46 (llamadaAfuncion -> VARIABLE TWO_POINTS TWO_POINTS .)
    COMA            reduce using rule 46 (llamadaAfuncion -> VARIABLE TWO_POINTS TWO_POINTS .)
    RPAREN          reduce using rule 46 (llamadaAfuncion -> VARIABLE TWO_POINTS TWO_POINTS .)
    LPAREN          shift and go to state 92
    VARIABLE        shift and go to state 118

    argumentos                     shift and go to state 147
    llamadaAfuncion                shift and go to state 148

state 121

    (48) argumentos -> LPAREN argumento . RPAREN

    RPAREN          shift and go to state 149


state 122

    (49) argumentos -> LPAREN RPAREN .

    POINT           reduce using rule 49 (argumentos -> LPAREN RPAREN .)
    COMMA_DOT       reduce using rule 49 (argumentos -> LPAREN RPAREN .)
    COMA            reduce using rule 49 (argumentos -> LPAREN RPAREN .)
    RPAREN          reduce using rule 49 (argumentos -> LPAREN RPAREN .)


state 123

    (50) argumento -> VARIABLE .
    (52) argumento -> VARIABLE . COMA argumento
    (43) llamadaAfuncion -> VARIABLE . argumentos
    (44) llamadaAfuncion -> VARIABLE . argumentos POINT llamadaAfuncion
    (45) llamadaAfuncion -> VARIABLE . TWO_POINTS TWO_POINTS argumentos
    (46) llamadaAfuncion -> VARIABLE . TWO_POINTS TWO_POINTS
    (47) llamadaAfuncion -> VARIABLE . TWO_POINTS TWO_POINTS llamadaAfuncion
    (42) llamadaAfuncionPorAlias -> VARIABLE . POINT llamadaAfuncion
    (48) argumentos -> . LPAREN argumento RPAREN
    (49) argumentos -> . LPAREN RPAREN

    RPAREN          reduce using rule 50 (argumento -> VARIABLE .)
    COMA            shift and go to state 150
    TWO_POINTS      shift and go to state 91
    POINT           shift and go to state 90
    LPAREN          shift and go to state 92

    argumentos                     shift and go to state 89

state 124

    (51) argumento -> dato .
    (53) argumento -> dato . COMA argumento

    RPAREN          reduce using rule 51 (argumento -> dato .)
    COMA            shift and go to state 151


state 125

    (54) argumento -> llamadaAfuncion .
    (56) argumento -> llamadaAfuncion . COMA argumento

    RPAREN          reduce using rule 54 (argumento -> llamadaAfuncion .)
    COMA            shift and go to state 152


state 126

    (55) argumento -> llamadaAfuncionPorAlias .
    (57) argumento -> llamadaAfuncionPorAlias . COMA argumento

    RPAREN          reduce using rule 55 (argumento -> llamadaAfuncionPorAlias .)
    COMA            shift and go to state 153


state 127

    (15) varEnVar -> VARIABLE POINT VARIABLE .
    (43) llamadaAfuncion -> VARIABLE . argumentos
    (44) llamadaAfuncion -> VARIABLE . argumentos POINT llamadaAfuncion
    (45) llamadaAfuncion -> VARIABLE . TWO_POINTS TWO_POINTS argumentos
    (46) llamadaAfuncion -> VARIABLE . TWO_POINTS TWO_POINTS
    (47) llamadaAfuncion -> VARIABLE . TWO_POINTS TWO_POINTS llamadaAfuncion
    (48) argumentos -> . LPAREN argumento RPAREN
    (49) argumentos -> . LPAREN RPAREN

    COMMA_DOT       reduce using rule 15 (varEnVar -> VARIABLE POINT VARIABLE .)
    TWO_POINTS      shift and go to state 91
    LPAREN          shift and go to state 92

    argumentos                     shift and go to state 89

state 128

    (73) atributos -> VARIABLE TWO_POINTS . dato
    (74) atributos -> VARIABLE TWO_POINTS . dato COMA atributos
    (26) dato -> . STRING
    (27) dato -> . CHAR
    (28) dato -> . DECIMAL
    (29) dato -> . HEXADECIMAL
    (30) dato -> . OCTAL
    (31) dato -> . BINARIO
    (32) dato -> . BOOL
    (33) dato -> . FLOAT
    (34) dato -> . VEC
    (35) dato -> . GENERIC

    STRING          shift and go to state 50
    CHAR            shift and go to state 51
    DECIMAL         shift and go to state 52
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 54
    BINARIO         shift and go to state 55
    BOOL            shift and go to state 56
    FLOAT           shift and go to state 57
    VEC             shift and go to state 84
    GENERIC         shift and go to state 59

    dato                           shift and go to state 154

state 129

    (72) struct -> STRUCT VARIABLE LKEY atributos RKEY .

    $end            reduce using rule 72 (struct -> STRUCT VARIABLE LKEY atributos RKEY .)
    RKEY            reduce using rule 72 (struct -> STRUCT VARIABLE LKEY atributos RKEY .)
    COMA            reduce using rule 72 (struct -> STRUCT VARIABLE LKEY atributos RKEY .)


state 130

    (58) definirFuncion -> FN VARIABLE trait parametros LKEY . cuerpoFuncion RKEY
    (71) cuerpoFuncion -> . cuerpo
    (1) cuerpo -> . asignacion
    (2) cuerpo -> . struct
    (3) cuerpo -> . varEnVar
    (4) cuerpo -> . definirFuncion
    (5) cuerpo -> . hashMap
    (6) cuerpo -> . vector
    (7) cuerpo -> . for
    (8) cuerpo -> . loop
    (9) cuerpo -> . eMatch
    (10) cuerpo -> . condicional
    (11) asignacion -> . definicion ASSIGN valorAsignado COMMA_DOT
    (12) asignacion -> . VARIABLE ASSIGN valorAsignado COMMA_DOT
    (13) asignacion -> . VARIABLE ASSIGN varEnVar COMMA_DOT
    (14) asignacion -> . definicion
    (72) struct -> . STRUCT VARIABLE LKEY atributos RKEY
    (15) varEnVar -> . VARIABLE POINT VARIABLE
    (58) definirFuncion -> . FN VARIABLE trait parametros LKEY cuerpoFuncion RKEY
    (59) definirFuncion -> . FN VARIABLE parametros LKEY cuerpoFuncion RKEY
    (85) hashMap -> . HASHMAP TWO_POINTS TWO_POINTS NEW LPAREN RPAREN
    (75) vector -> . VEC NOT LBRACKET datos RBRACKET
    (86) for -> . FOR VARIABLE IN rango LKEY cuerpoFuncion RKEY
    (92) loop -> . LOOP LKEY cuerpoFuncion RKEY
    (89) eMatch -> . MATCH VARIABLE LKEY content RKEY
    (78) condicional -> . IF VARIABLE comparacion VARIABLE LKEY cuerpo RKEY
    (16) definicion -> . creacion
    (17) definicion -> . creacion COMMA_DOT
    (18) definicion -> . creacion tipoDato
    (19) creacion -> . LET MUT VARIABLE
    (20) creacion -> . LET VARIABLE
    (21) creacion -> . CONST VARIABLE

    VARIABLE        shift and go to state 13
    STRUCT          shift and go to state 14
    FN              shift and go to state 15
    HASHMAP         shift and go to state 16
    VEC             shift and go to state 17
    FOR             shift and go to state 18
    LOOP            shift and go to state 19
    MATCH           shift and go to state 20
    IF              shift and go to state 21
    LET             shift and go to state 23
    CONST           shift and go to state 24

    cuerpoFuncion                  shift and go to state 155
    cuerpo                         shift and go to state 73
    asignacion                     shift and go to state 2
    struct                         shift and go to state 3
    varEnVar                       shift and go to state 4
    definirFuncion                 shift and go to state 5
    hashMap                        shift and go to state 6
    vector                         shift and go to state 7
    for                            shift and go to state 8
    loop                           shift and go to state 9
    eMatch                         shift and go to state 10
    condicional                    shift and go to state 11
    definicion                     shift and go to state 12
    creacion                       shift and go to state 22

state 131

    (59) definirFuncion -> FN VARIABLE parametros LKEY cuerpoFuncion . RKEY

    RKEY            shift and go to state 156


state 132

    (60) trait -> LESS_THAN GENERIC TWO_POINTS . VARIABLE MORE_THAN

    VARIABLE        shift and go to state 157


state 133

    (63) parametros -> LPAREN RPAREN datoARetornar .

    LKEY            reduce using rule 63 (parametros -> LPAREN RPAREN datoARetornar .)
    ASSIGN          reduce using rule 63 (parametros -> LPAREN RPAREN datoARetornar .)
    $end            reduce using rule 63 (parametros -> LPAREN RPAREN datoARetornar .)
    RKEY            reduce using rule 63 (parametros -> LPAREN RPAREN datoARetornar .)
    COMA            reduce using rule 63 (parametros -> LPAREN RPAREN datoARetornar .)


state 134

    (61) datoARetornar -> MINUS . MORE_THAN dato
    (62) datoARetornar -> MINUS . MORE_THAN NOT

    MORE_THAN       shift and go to state 158


state 135

    (64) parametros -> LPAREN parametro RPAREN . datoARetornar
    (66) parametros -> LPAREN parametro RPAREN .
    (61) datoARetornar -> . MINUS MORE_THAN dato
    (62) datoARetornar -> . MINUS MORE_THAN NOT

    LKEY            reduce using rule 66 (parametros -> LPAREN parametro RPAREN .)
    ASSIGN          reduce using rule 66 (parametros -> LPAREN parametro RPAREN .)
    $end            reduce using rule 66 (parametros -> LPAREN parametro RPAREN .)
    RKEY            reduce using rule 66 (parametros -> LPAREN parametro RPAREN .)
    COMA            reduce using rule 66 (parametros -> LPAREN parametro RPAREN .)
    MINUS           shift and go to state 134

    datoARetornar                  shift and go to state 159

state 136

    (67) parametro -> VARIABLE TWO_POINTS . dato
    (68) parametro -> VARIABLE TWO_POINTS . dato COMA parametro
    (26) dato -> . STRING
    (27) dato -> . CHAR
    (28) dato -> . DECIMAL
    (29) dato -> . HEXADECIMAL
    (30) dato -> . OCTAL
    (31) dato -> . BINARIO
    (32) dato -> . BOOL
    (33) dato -> . FLOAT
    (34) dato -> . VEC
    (35) dato -> . GENERIC

    STRING          shift and go to state 50
    CHAR            shift and go to state 51
    DECIMAL         shift and go to state 52
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 54
    BINARIO         shift and go to state 55
    BOOL            shift and go to state 56
    FLOAT           shift and go to state 57
    VEC             shift and go to state 84
    GENERIC         shift and go to state 59

    dato                           shift and go to state 160

state 137

    (69) parametro -> dato COMA . parametro
    (67) parametro -> . VARIABLE TWO_POINTS dato
    (68) parametro -> . VARIABLE TWO_POINTS dato COMA parametro
    (69) parametro -> . dato COMA parametro
    (70) parametro -> . dato
    (26) dato -> . STRING
    (27) dato -> . CHAR
    (28) dato -> . DECIMAL
    (29) dato -> . HEXADECIMAL
    (30) dato -> . OCTAL
    (31) dato -> . BINARIO
    (32) dato -> . BOOL
    (33) dato -> . FLOAT
    (34) dato -> . VEC
    (35) dato -> . GENERIC

    VARIABLE        shift and go to state 103
    STRING          shift and go to state 50
    CHAR            shift and go to state 51
    DECIMAL         shift and go to state 52
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 54
    BINARIO         shift and go to state 55
    BOOL            shift and go to state 56
    FLOAT           shift and go to state 57
    VEC             shift and go to state 84
    GENERIC         shift and go to state 59

    dato                           shift and go to state 104
    parametro                      shift and go to state 161

state 138

    (85) hashMap -> HASHMAP TWO_POINTS TWO_POINTS NEW LPAREN . RPAREN

    RPAREN          shift and go to state 162


state 139

    (75) vector -> VEC NOT LBRACKET datos RBRACKET .

    $end            reduce using rule 75 (vector -> VEC NOT LBRACKET datos RBRACKET .)
    COMMA_DOT       reduce using rule 75 (vector -> VEC NOT LBRACKET datos RBRACKET .)
    RKEY            reduce using rule 75 (vector -> VEC NOT LBRACKET datos RBRACKET .)
    COMA            reduce using rule 75 (vector -> VEC NOT LBRACKET datos RBRACKET .)


state 140

    (77) datos -> dato COMA . datos
    (76) datos -> . dato
    (77) datos -> . dato COMA datos
    (26) dato -> . STRING
    (27) dato -> . CHAR
    (28) dato -> . DECIMAL
    (29) dato -> . HEXADECIMAL
    (30) dato -> . OCTAL
    (31) dato -> . BINARIO
    (32) dato -> . BOOL
    (33) dato -> . FLOAT
    (34) dato -> . VEC
    (35) dato -> . GENERIC

    STRING          shift and go to state 50
    CHAR            shift and go to state 51
    DECIMAL         shift and go to state 52
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 54
    BINARIO         shift and go to state 55
    BOOL            shift and go to state 56
    FLOAT           shift and go to state 57
    VEC             shift and go to state 84
    GENERIC         shift and go to state 59

    dato                           shift and go to state 107
    datos                          shift and go to state 163

state 141

    (86) for -> FOR VARIABLE IN rango LKEY . cuerpoFuncion RKEY
    (71) cuerpoFuncion -> . cuerpo
    (1) cuerpo -> . asignacion
    (2) cuerpo -> . struct
    (3) cuerpo -> . varEnVar
    (4) cuerpo -> . definirFuncion
    (5) cuerpo -> . hashMap
    (6) cuerpo -> . vector
    (7) cuerpo -> . for
    (8) cuerpo -> . loop
    (9) cuerpo -> . eMatch
    (10) cuerpo -> . condicional
    (11) asignacion -> . definicion ASSIGN valorAsignado COMMA_DOT
    (12) asignacion -> . VARIABLE ASSIGN valorAsignado COMMA_DOT
    (13) asignacion -> . VARIABLE ASSIGN varEnVar COMMA_DOT
    (14) asignacion -> . definicion
    (72) struct -> . STRUCT VARIABLE LKEY atributos RKEY
    (15) varEnVar -> . VARIABLE POINT VARIABLE
    (58) definirFuncion -> . FN VARIABLE trait parametros LKEY cuerpoFuncion RKEY
    (59) definirFuncion -> . FN VARIABLE parametros LKEY cuerpoFuncion RKEY
    (85) hashMap -> . HASHMAP TWO_POINTS TWO_POINTS NEW LPAREN RPAREN
    (75) vector -> . VEC NOT LBRACKET datos RBRACKET
    (86) for -> . FOR VARIABLE IN rango LKEY cuerpoFuncion RKEY
    (92) loop -> . LOOP LKEY cuerpoFuncion RKEY
    (89) eMatch -> . MATCH VARIABLE LKEY content RKEY
    (78) condicional -> . IF VARIABLE comparacion VARIABLE LKEY cuerpo RKEY
    (16) definicion -> . creacion
    (17) definicion -> . creacion COMMA_DOT
    (18) definicion -> . creacion tipoDato
    (19) creacion -> . LET MUT VARIABLE
    (20) creacion -> . LET VARIABLE
    (21) creacion -> . CONST VARIABLE

    VARIABLE        shift and go to state 13
    STRUCT          shift and go to state 14
    FN              shift and go to state 15
    HASHMAP         shift and go to state 16
    VEC             shift and go to state 17
    FOR             shift and go to state 18
    LOOP            shift and go to state 19
    MATCH           shift and go to state 20
    IF              shift and go to state 21
    LET             shift and go to state 23
    CONST           shift and go to state 24

    cuerpoFuncion                  shift and go to state 164
    cuerpo                         shift and go to state 73
    asignacion                     shift and go to state 2
    struct                         shift and go to state 3
    varEnVar                       shift and go to state 4
    definirFuncion                 shift and go to state 5
    hashMap                        shift and go to state 6
    vector                         shift and go to state 7
    for                            shift and go to state 8
    loop                           shift and go to state 9
    eMatch                         shift and go to state 10
    condicional                    shift and go to state 11
    definicion                     shift and go to state 12
    creacion                       shift and go to state 22

state 142

    (87) rango -> DECIMAL POINT . POINT DECIMAL
    (88) rango -> DECIMAL POINT . POINT ASSIGN DECIMAL

    POINT           shift and go to state 165


state 143

    (89) eMatch -> MATCH VARIABLE LKEY content RKEY .

    $end            reduce using rule 89 (eMatch -> MATCH VARIABLE LKEY content RKEY .)
    RKEY            reduce using rule 89 (eMatch -> MATCH VARIABLE LKEY content RKEY .)
    COMA            reduce using rule 89 (eMatch -> MATCH VARIABLE LKEY content RKEY .)


state 144

    (90) content -> dato MOREEQUAL_THAN . cuerpoFuncion
    (91) content -> dato MOREEQUAL_THAN . cuerpoFuncion COMA content
    (71) cuerpoFuncion -> . cuerpo
    (1) cuerpo -> . asignacion
    (2) cuerpo -> . struct
    (3) cuerpo -> . varEnVar
    (4) cuerpo -> . definirFuncion
    (5) cuerpo -> . hashMap
    (6) cuerpo -> . vector
    (7) cuerpo -> . for
    (8) cuerpo -> . loop
    (9) cuerpo -> . eMatch
    (10) cuerpo -> . condicional
    (11) asignacion -> . definicion ASSIGN valorAsignado COMMA_DOT
    (12) asignacion -> . VARIABLE ASSIGN valorAsignado COMMA_DOT
    (13) asignacion -> . VARIABLE ASSIGN varEnVar COMMA_DOT
    (14) asignacion -> . definicion
    (72) struct -> . STRUCT VARIABLE LKEY atributos RKEY
    (15) varEnVar -> . VARIABLE POINT VARIABLE
    (58) definirFuncion -> . FN VARIABLE trait parametros LKEY cuerpoFuncion RKEY
    (59) definirFuncion -> . FN VARIABLE parametros LKEY cuerpoFuncion RKEY
    (85) hashMap -> . HASHMAP TWO_POINTS TWO_POINTS NEW LPAREN RPAREN
    (75) vector -> . VEC NOT LBRACKET datos RBRACKET
    (86) for -> . FOR VARIABLE IN rango LKEY cuerpoFuncion RKEY
    (92) loop -> . LOOP LKEY cuerpoFuncion RKEY
    (89) eMatch -> . MATCH VARIABLE LKEY content RKEY
    (78) condicional -> . IF VARIABLE comparacion VARIABLE LKEY cuerpo RKEY
    (16) definicion -> . creacion
    (17) definicion -> . creacion COMMA_DOT
    (18) definicion -> . creacion tipoDato
    (19) creacion -> . LET MUT VARIABLE
    (20) creacion -> . LET VARIABLE
    (21) creacion -> . CONST VARIABLE

    VARIABLE        shift and go to state 13
    STRUCT          shift and go to state 14
    FN              shift and go to state 15
    HASHMAP         shift and go to state 16
    VEC             shift and go to state 17
    FOR             shift and go to state 18
    LOOP            shift and go to state 19
    MATCH           shift and go to state 20
    IF              shift and go to state 21
    LET             shift and go to state 23
    CONST           shift and go to state 24

    cuerpoFuncion                  shift and go to state 166
    cuerpo                         shift and go to state 73
    asignacion                     shift and go to state 2
    struct                         shift and go to state 3
    varEnVar                       shift and go to state 4
    definirFuncion                 shift and go to state 5
    hashMap                        shift and go to state 6
    vector                         shift and go to state 7
    for                            shift and go to state 8
    loop                           shift and go to state 9
    eMatch                         shift and go to state 10
    condicional                    shift and go to state 11
    definicion                     shift and go to state 12
    creacion                       shift and go to state 22

state 145

    (78) condicional -> IF VARIABLE comparacion VARIABLE LKEY . cuerpo RKEY
    (1) cuerpo -> . asignacion
    (2) cuerpo -> . struct
    (3) cuerpo -> . varEnVar
    (4) cuerpo -> . definirFuncion
    (5) cuerpo -> . hashMap
    (6) cuerpo -> . vector
    (7) cuerpo -> . for
    (8) cuerpo -> . loop
    (9) cuerpo -> . eMatch
    (10) cuerpo -> . condicional
    (11) asignacion -> . definicion ASSIGN valorAsignado COMMA_DOT
    (12) asignacion -> . VARIABLE ASSIGN valorAsignado COMMA_DOT
    (13) asignacion -> . VARIABLE ASSIGN varEnVar COMMA_DOT
    (14) asignacion -> . definicion
    (72) struct -> . STRUCT VARIABLE LKEY atributos RKEY
    (15) varEnVar -> . VARIABLE POINT VARIABLE
    (58) definirFuncion -> . FN VARIABLE trait parametros LKEY cuerpoFuncion RKEY
    (59) definirFuncion -> . FN VARIABLE parametros LKEY cuerpoFuncion RKEY
    (85) hashMap -> . HASHMAP TWO_POINTS TWO_POINTS NEW LPAREN RPAREN
    (75) vector -> . VEC NOT LBRACKET datos RBRACKET
    (86) for -> . FOR VARIABLE IN rango LKEY cuerpoFuncion RKEY
    (92) loop -> . LOOP LKEY cuerpoFuncion RKEY
    (89) eMatch -> . MATCH VARIABLE LKEY content RKEY
    (78) condicional -> . IF VARIABLE comparacion VARIABLE LKEY cuerpo RKEY
    (16) definicion -> . creacion
    (17) definicion -> . creacion COMMA_DOT
    (18) definicion -> . creacion tipoDato
    (19) creacion -> . LET MUT VARIABLE
    (20) creacion -> . LET VARIABLE
    (21) creacion -> . CONST VARIABLE

    VARIABLE        shift and go to state 13
    STRUCT          shift and go to state 14
    FN              shift and go to state 15
    HASHMAP         shift and go to state 16
    VEC             shift and go to state 17
    FOR             shift and go to state 18
    LOOP            shift and go to state 19
    MATCH           shift and go to state 20
    IF              shift and go to state 21
    LET             shift and go to state 23
    CONST           shift and go to state 24

    cuerpo                         shift and go to state 167
    asignacion                     shift and go to state 2
    struct                         shift and go to state 3
    varEnVar                       shift and go to state 4
    definirFuncion                 shift and go to state 5
    hashMap                        shift and go to state 6
    vector                         shift and go to state 7
    for                            shift and go to state 8
    loop                           shift and go to state 9
    eMatch                         shift and go to state 10
    condicional                    shift and go to state 11
    definicion                     shift and go to state 12
    creacion                       shift and go to state 22

state 146

    (44) llamadaAfuncion -> VARIABLE argumentos POINT llamadaAfuncion .

    COMMA_DOT       reduce using rule 44 (llamadaAfuncion -> VARIABLE argumentos POINT llamadaAfuncion .)
    COMA            reduce using rule 44 (llamadaAfuncion -> VARIABLE argumentos POINT llamadaAfuncion .)
    RPAREN          reduce using rule 44 (llamadaAfuncion -> VARIABLE argumentos POINT llamadaAfuncion .)


state 147

    (45) llamadaAfuncion -> VARIABLE TWO_POINTS TWO_POINTS argumentos .

    COMMA_DOT       reduce using rule 45 (llamadaAfuncion -> VARIABLE TWO_POINTS TWO_POINTS argumentos .)
    COMA            reduce using rule 45 (llamadaAfuncion -> VARIABLE TWO_POINTS TWO_POINTS argumentos .)
    RPAREN          reduce using rule 45 (llamadaAfuncion -> VARIABLE TWO_POINTS TWO_POINTS argumentos .)


state 148

    (47) llamadaAfuncion -> VARIABLE TWO_POINTS TWO_POINTS llamadaAfuncion .

    COMMA_DOT       reduce using rule 47 (llamadaAfuncion -> VARIABLE TWO_POINTS TWO_POINTS llamadaAfuncion .)
    COMA            reduce using rule 47 (llamadaAfuncion -> VARIABLE TWO_POINTS TWO_POINTS llamadaAfuncion .)
    RPAREN          reduce using rule 47 (llamadaAfuncion -> VARIABLE TWO_POINTS TWO_POINTS llamadaAfuncion .)


state 149

    (48) argumentos -> LPAREN argumento RPAREN .

    POINT           reduce using rule 48 (argumentos -> LPAREN argumento RPAREN .)
    COMMA_DOT       reduce using rule 48 (argumentos -> LPAREN argumento RPAREN .)
    COMA            reduce using rule 48 (argumentos -> LPAREN argumento RPAREN .)
    RPAREN          reduce using rule 48 (argumentos -> LPAREN argumento RPAREN .)


state 150

    (52) argumento -> VARIABLE COMA . argumento
    (50) argumento -> . VARIABLE
    (51) argumento -> . dato
    (52) argumento -> . VARIABLE COMA argumento
    (53) argumento -> . dato COMA argumento
    (54) argumento -> . llamadaAfuncion
    (55) argumento -> . llamadaAfuncionPorAlias
    (56) argumento -> . llamadaAfuncion COMA argumento
    (57) argumento -> . llamadaAfuncionPorAlias COMA argumento
    (26) dato -> . STRING
    (27) dato -> . CHAR
    (28) dato -> . DECIMAL
    (29) dato -> . HEXADECIMAL
    (30) dato -> . OCTAL
    (31) dato -> . BINARIO
    (32) dato -> . BOOL
    (33) dato -> . FLOAT
    (34) dato -> . VEC
    (35) dato -> . GENERIC
    (43) llamadaAfuncion -> . VARIABLE argumentos
    (44) llamadaAfuncion -> . VARIABLE argumentos POINT llamadaAfuncion
    (45) llamadaAfuncion -> . VARIABLE TWO_POINTS TWO_POINTS argumentos
    (46) llamadaAfuncion -> . VARIABLE TWO_POINTS TWO_POINTS
    (47) llamadaAfuncion -> . VARIABLE TWO_POINTS TWO_POINTS llamadaAfuncion
    (42) llamadaAfuncionPorAlias -> . VARIABLE POINT llamadaAfuncion

    VARIABLE        shift and go to state 123
    STRING          shift and go to state 50
    CHAR            shift and go to state 51
    DECIMAL         shift and go to state 52
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 54
    BINARIO         shift and go to state 55
    BOOL            shift and go to state 56
    FLOAT           shift and go to state 57
    VEC             shift and go to state 84
    GENERIC         shift and go to state 59

    argumento                      shift and go to state 168
    dato                           shift and go to state 124
    llamadaAfuncion                shift and go to state 125
    llamadaAfuncionPorAlias        shift and go to state 126

state 151

    (53) argumento -> dato COMA . argumento
    (50) argumento -> . VARIABLE
    (51) argumento -> . dato
    (52) argumento -> . VARIABLE COMA argumento
    (53) argumento -> . dato COMA argumento
    (54) argumento -> . llamadaAfuncion
    (55) argumento -> . llamadaAfuncionPorAlias
    (56) argumento -> . llamadaAfuncion COMA argumento
    (57) argumento -> . llamadaAfuncionPorAlias COMA argumento
    (26) dato -> . STRING
    (27) dato -> . CHAR
    (28) dato -> . DECIMAL
    (29) dato -> . HEXADECIMAL
    (30) dato -> . OCTAL
    (31) dato -> . BINARIO
    (32) dato -> . BOOL
    (33) dato -> . FLOAT
    (34) dato -> . VEC
    (35) dato -> . GENERIC
    (43) llamadaAfuncion -> . VARIABLE argumentos
    (44) llamadaAfuncion -> . VARIABLE argumentos POINT llamadaAfuncion
    (45) llamadaAfuncion -> . VARIABLE TWO_POINTS TWO_POINTS argumentos
    (46) llamadaAfuncion -> . VARIABLE TWO_POINTS TWO_POINTS
    (47) llamadaAfuncion -> . VARIABLE TWO_POINTS TWO_POINTS llamadaAfuncion
    (42) llamadaAfuncionPorAlias -> . VARIABLE POINT llamadaAfuncion

    VARIABLE        shift and go to state 123
    STRING          shift and go to state 50
    CHAR            shift and go to state 51
    DECIMAL         shift and go to state 52
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 54
    BINARIO         shift and go to state 55
    BOOL            shift and go to state 56
    FLOAT           shift and go to state 57
    VEC             shift and go to state 84
    GENERIC         shift and go to state 59

    dato                           shift and go to state 124
    argumento                      shift and go to state 169
    llamadaAfuncion                shift and go to state 125
    llamadaAfuncionPorAlias        shift and go to state 126

state 152

    (56) argumento -> llamadaAfuncion COMA . argumento
    (50) argumento -> . VARIABLE
    (51) argumento -> . dato
    (52) argumento -> . VARIABLE COMA argumento
    (53) argumento -> . dato COMA argumento
    (54) argumento -> . llamadaAfuncion
    (55) argumento -> . llamadaAfuncionPorAlias
    (56) argumento -> . llamadaAfuncion COMA argumento
    (57) argumento -> . llamadaAfuncionPorAlias COMA argumento
    (26) dato -> . STRING
    (27) dato -> . CHAR
    (28) dato -> . DECIMAL
    (29) dato -> . HEXADECIMAL
    (30) dato -> . OCTAL
    (31) dato -> . BINARIO
    (32) dato -> . BOOL
    (33) dato -> . FLOAT
    (34) dato -> . VEC
    (35) dato -> . GENERIC
    (43) llamadaAfuncion -> . VARIABLE argumentos
    (44) llamadaAfuncion -> . VARIABLE argumentos POINT llamadaAfuncion
    (45) llamadaAfuncion -> . VARIABLE TWO_POINTS TWO_POINTS argumentos
    (46) llamadaAfuncion -> . VARIABLE TWO_POINTS TWO_POINTS
    (47) llamadaAfuncion -> . VARIABLE TWO_POINTS TWO_POINTS llamadaAfuncion
    (42) llamadaAfuncionPorAlias -> . VARIABLE POINT llamadaAfuncion

    VARIABLE        shift and go to state 123
    STRING          shift and go to state 50
    CHAR            shift and go to state 51
    DECIMAL         shift and go to state 52
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 54
    BINARIO         shift and go to state 55
    BOOL            shift and go to state 56
    FLOAT           shift and go to state 57
    VEC             shift and go to state 84
    GENERIC         shift and go to state 59

    llamadaAfuncion                shift and go to state 125
    argumento                      shift and go to state 170
    dato                           shift and go to state 124
    llamadaAfuncionPorAlias        shift and go to state 126

state 153

    (57) argumento -> llamadaAfuncionPorAlias COMA . argumento
    (50) argumento -> . VARIABLE
    (51) argumento -> . dato
    (52) argumento -> . VARIABLE COMA argumento
    (53) argumento -> . dato COMA argumento
    (54) argumento -> . llamadaAfuncion
    (55) argumento -> . llamadaAfuncionPorAlias
    (56) argumento -> . llamadaAfuncion COMA argumento
    (57) argumento -> . llamadaAfuncionPorAlias COMA argumento
    (26) dato -> . STRING
    (27) dato -> . CHAR
    (28) dato -> . DECIMAL
    (29) dato -> . HEXADECIMAL
    (30) dato -> . OCTAL
    (31) dato -> . BINARIO
    (32) dato -> . BOOL
    (33) dato -> . FLOAT
    (34) dato -> . VEC
    (35) dato -> . GENERIC
    (43) llamadaAfuncion -> . VARIABLE argumentos
    (44) llamadaAfuncion -> . VARIABLE argumentos POINT llamadaAfuncion
    (45) llamadaAfuncion -> . VARIABLE TWO_POINTS TWO_POINTS argumentos
    (46) llamadaAfuncion -> . VARIABLE TWO_POINTS TWO_POINTS
    (47) llamadaAfuncion -> . VARIABLE TWO_POINTS TWO_POINTS llamadaAfuncion
    (42) llamadaAfuncionPorAlias -> . VARIABLE POINT llamadaAfuncion

    VARIABLE        shift and go to state 123
    STRING          shift and go to state 50
    CHAR            shift and go to state 51
    DECIMAL         shift and go to state 52
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 54
    BINARIO         shift and go to state 55
    BOOL            shift and go to state 56
    FLOAT           shift and go to state 57
    VEC             shift and go to state 84
    GENERIC         shift and go to state 59

    llamadaAfuncionPorAlias        shift and go to state 126
    argumento                      shift and go to state 171
    dato                           shift and go to state 124
    llamadaAfuncion                shift and go to state 125

state 154

    (73) atributos -> VARIABLE TWO_POINTS dato .
    (74) atributos -> VARIABLE TWO_POINTS dato . COMA atributos

    RKEY            reduce using rule 73 (atributos -> VARIABLE TWO_POINTS dato .)
    COMA            shift and go to state 172


state 155

    (58) definirFuncion -> FN VARIABLE trait parametros LKEY cuerpoFuncion . RKEY

    RKEY            shift and go to state 173


state 156

    (59) definirFuncion -> FN VARIABLE parametros LKEY cuerpoFuncion RKEY .

    $end            reduce using rule 59 (definirFuncion -> FN VARIABLE parametros LKEY cuerpoFuncion RKEY .)
    RKEY            reduce using rule 59 (definirFuncion -> FN VARIABLE parametros LKEY cuerpoFuncion RKEY .)
    COMA            reduce using rule 59 (definirFuncion -> FN VARIABLE parametros LKEY cuerpoFuncion RKEY .)


state 157

    (60) trait -> LESS_THAN GENERIC TWO_POINTS VARIABLE . MORE_THAN

    MORE_THAN       shift and go to state 174


state 158

    (61) datoARetornar -> MINUS MORE_THAN . dato
    (62) datoARetornar -> MINUS MORE_THAN . NOT
    (26) dato -> . STRING
    (27) dato -> . CHAR
    (28) dato -> . DECIMAL
    (29) dato -> . HEXADECIMAL
    (30) dato -> . OCTAL
    (31) dato -> . BINARIO
    (32) dato -> . BOOL
    (33) dato -> . FLOAT
    (34) dato -> . VEC
    (35) dato -> . GENERIC

    NOT             shift and go to state 176
    STRING          shift and go to state 50
    CHAR            shift and go to state 51
    DECIMAL         shift and go to state 52
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 54
    BINARIO         shift and go to state 55
    BOOL            shift and go to state 56
    FLOAT           shift and go to state 57
    VEC             shift and go to state 84
    GENERIC         shift and go to state 59

    dato                           shift and go to state 175

state 159

    (64) parametros -> LPAREN parametro RPAREN datoARetornar .

    LKEY            reduce using rule 64 (parametros -> LPAREN parametro RPAREN datoARetornar .)
    ASSIGN          reduce using rule 64 (parametros -> LPAREN parametro RPAREN datoARetornar .)
    $end            reduce using rule 64 (parametros -> LPAREN parametro RPAREN datoARetornar .)
    RKEY            reduce using rule 64 (parametros -> LPAREN parametro RPAREN datoARetornar .)
    COMA            reduce using rule 64 (parametros -> LPAREN parametro RPAREN datoARetornar .)


state 160

    (67) parametro -> VARIABLE TWO_POINTS dato .
    (68) parametro -> VARIABLE TWO_POINTS dato . COMA parametro

    RPAREN          reduce using rule 67 (parametro -> VARIABLE TWO_POINTS dato .)
    COMA            shift and go to state 177


state 161

    (69) parametro -> dato COMA parametro .

    RPAREN          reduce using rule 69 (parametro -> dato COMA parametro .)


state 162

    (85) hashMap -> HASHMAP TWO_POINTS TWO_POINTS NEW LPAREN RPAREN .

    $end            reduce using rule 85 (hashMap -> HASHMAP TWO_POINTS TWO_POINTS NEW LPAREN RPAREN .)
    COMMA_DOT       reduce using rule 85 (hashMap -> HASHMAP TWO_POINTS TWO_POINTS NEW LPAREN RPAREN .)
    RKEY            reduce using rule 85 (hashMap -> HASHMAP TWO_POINTS TWO_POINTS NEW LPAREN RPAREN .)
    COMA            reduce using rule 85 (hashMap -> HASHMAP TWO_POINTS TWO_POINTS NEW LPAREN RPAREN .)


state 163

    (77) datos -> dato COMA datos .

    RBRACKET        reduce using rule 77 (datos -> dato COMA datos .)


state 164

    (86) for -> FOR VARIABLE IN rango LKEY cuerpoFuncion . RKEY

    RKEY            shift and go to state 178


state 165

    (87) rango -> DECIMAL POINT POINT . DECIMAL
    (88) rango -> DECIMAL POINT POINT . ASSIGN DECIMAL

    DECIMAL         shift and go to state 179
    ASSIGN          shift and go to state 180


state 166

    (90) content -> dato MOREEQUAL_THAN cuerpoFuncion .
    (91) content -> dato MOREEQUAL_THAN cuerpoFuncion . COMA content

    RKEY            reduce using rule 90 (content -> dato MOREEQUAL_THAN cuerpoFuncion .)
    COMA            shift and go to state 181


state 167

    (78) condicional -> IF VARIABLE comparacion VARIABLE LKEY cuerpo . RKEY

    RKEY            shift and go to state 182


state 168

    (52) argumento -> VARIABLE COMA argumento .

    RPAREN          reduce using rule 52 (argumento -> VARIABLE COMA argumento .)


state 169

    (53) argumento -> dato COMA argumento .

    RPAREN          reduce using rule 53 (argumento -> dato COMA argumento .)


state 170

    (56) argumento -> llamadaAfuncion COMA argumento .

    RPAREN          reduce using rule 56 (argumento -> llamadaAfuncion COMA argumento .)


state 171

    (57) argumento -> llamadaAfuncionPorAlias COMA argumento .

    RPAREN          reduce using rule 57 (argumento -> llamadaAfuncionPorAlias COMA argumento .)


state 172

    (74) atributos -> VARIABLE TWO_POINTS dato COMA . atributos
    (73) atributos -> . VARIABLE TWO_POINTS dato
    (74) atributos -> . VARIABLE TWO_POINTS dato COMA atributos

    VARIABLE        shift and go to state 96

    atributos                      shift and go to state 183

state 173

    (58) definirFuncion -> FN VARIABLE trait parametros LKEY cuerpoFuncion RKEY .

    $end            reduce using rule 58 (definirFuncion -> FN VARIABLE trait parametros LKEY cuerpoFuncion RKEY .)
    RKEY            reduce using rule 58 (definirFuncion -> FN VARIABLE trait parametros LKEY cuerpoFuncion RKEY .)
    COMA            reduce using rule 58 (definirFuncion -> FN VARIABLE trait parametros LKEY cuerpoFuncion RKEY .)


state 174

    (60) trait -> LESS_THAN GENERIC TWO_POINTS VARIABLE MORE_THAN .

    LPAREN          reduce using rule 60 (trait -> LESS_THAN GENERIC TWO_POINTS VARIABLE MORE_THAN .)


state 175

    (61) datoARetornar -> MINUS MORE_THAN dato .

    LKEY            reduce using rule 61 (datoARetornar -> MINUS MORE_THAN dato .)
    ASSIGN          reduce using rule 61 (datoARetornar -> MINUS MORE_THAN dato .)
    $end            reduce using rule 61 (datoARetornar -> MINUS MORE_THAN dato .)
    RKEY            reduce using rule 61 (datoARetornar -> MINUS MORE_THAN dato .)
    COMA            reduce using rule 61 (datoARetornar -> MINUS MORE_THAN dato .)


state 176

    (62) datoARetornar -> MINUS MORE_THAN NOT .

    LKEY            reduce using rule 62 (datoARetornar -> MINUS MORE_THAN NOT .)
    ASSIGN          reduce using rule 62 (datoARetornar -> MINUS MORE_THAN NOT .)
    $end            reduce using rule 62 (datoARetornar -> MINUS MORE_THAN NOT .)
    RKEY            reduce using rule 62 (datoARetornar -> MINUS MORE_THAN NOT .)
    COMA            reduce using rule 62 (datoARetornar -> MINUS MORE_THAN NOT .)


state 177

    (68) parametro -> VARIABLE TWO_POINTS dato COMA . parametro
    (67) parametro -> . VARIABLE TWO_POINTS dato
    (68) parametro -> . VARIABLE TWO_POINTS dato COMA parametro
    (69) parametro -> . dato COMA parametro
    (70) parametro -> . dato
    (26) dato -> . STRING
    (27) dato -> . CHAR
    (28) dato -> . DECIMAL
    (29) dato -> . HEXADECIMAL
    (30) dato -> . OCTAL
    (31) dato -> . BINARIO
    (32) dato -> . BOOL
    (33) dato -> . FLOAT
    (34) dato -> . VEC
    (35) dato -> . GENERIC

    VARIABLE        shift and go to state 103
    STRING          shift and go to state 50
    CHAR            shift and go to state 51
    DECIMAL         shift and go to state 52
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 54
    BINARIO         shift and go to state 55
    BOOL            shift and go to state 56
    FLOAT           shift and go to state 57
    VEC             shift and go to state 84
    GENERIC         shift and go to state 59

    dato                           shift and go to state 104
    parametro                      shift and go to state 184

state 178

    (86) for -> FOR VARIABLE IN rango LKEY cuerpoFuncion RKEY .

    $end            reduce using rule 86 (for -> FOR VARIABLE IN rango LKEY cuerpoFuncion RKEY .)
    RKEY            reduce using rule 86 (for -> FOR VARIABLE IN rango LKEY cuerpoFuncion RKEY .)
    COMA            reduce using rule 86 (for -> FOR VARIABLE IN rango LKEY cuerpoFuncion RKEY .)


state 179

    (87) rango -> DECIMAL POINT POINT DECIMAL .

    LKEY            reduce using rule 87 (rango -> DECIMAL POINT POINT DECIMAL .)


state 180

    (88) rango -> DECIMAL POINT POINT ASSIGN . DECIMAL

    DECIMAL         shift and go to state 185


state 181

    (91) content -> dato MOREEQUAL_THAN cuerpoFuncion COMA . content
    (90) content -> . dato MOREEQUAL_THAN cuerpoFuncion
    (91) content -> . dato MOREEQUAL_THAN cuerpoFuncion COMA content
    (26) dato -> . STRING
    (27) dato -> . CHAR
    (28) dato -> . DECIMAL
    (29) dato -> . HEXADECIMAL
    (30) dato -> . OCTAL
    (31) dato -> . BINARIO
    (32) dato -> . BOOL
    (33) dato -> . FLOAT
    (34) dato -> . VEC
    (35) dato -> . GENERIC

    STRING          shift and go to state 50
    CHAR            shift and go to state 51
    DECIMAL         shift and go to state 52
    HEXADECIMAL     shift and go to state 53
    OCTAL           shift and go to state 54
    BINARIO         shift and go to state 55
    BOOL            shift and go to state 56
    FLOAT           shift and go to state 57
    VEC             shift and go to state 84
    GENERIC         shift and go to state 59

    dato                           shift and go to state 112
    content                        shift and go to state 186

state 182

    (78) condicional -> IF VARIABLE comparacion VARIABLE LKEY cuerpo RKEY .

    $end            reduce using rule 78 (condicional -> IF VARIABLE comparacion VARIABLE LKEY cuerpo RKEY .)
    RKEY            reduce using rule 78 (condicional -> IF VARIABLE comparacion VARIABLE LKEY cuerpo RKEY .)
    COMA            reduce using rule 78 (condicional -> IF VARIABLE comparacion VARIABLE LKEY cuerpo RKEY .)


state 183

    (74) atributos -> VARIABLE TWO_POINTS dato COMA atributos .

    RKEY            reduce using rule 74 (atributos -> VARIABLE TWO_POINTS dato COMA atributos .)


state 184

    (68) parametro -> VARIABLE TWO_POINTS dato COMA parametro .

    RPAREN          reduce using rule 68 (parametro -> VARIABLE TWO_POINTS dato COMA parametro .)


state 185

    (88) rango -> DECIMAL POINT POINT ASSIGN DECIMAL .

    LKEY            reduce using rule 88 (rango -> DECIMAL POINT POINT ASSIGN DECIMAL .)


state 186

    (91) content -> dato MOREEQUAL_THAN cuerpoFuncion COMA content .

    RKEY            reduce using rule 91 (content -> dato MOREEQUAL_THAN cuerpoFuncion COMA content .)

