Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    ALIGNOF
    AND
    AND_BIT
    AS
    BECOME
    BOX
    BREAK
    BYTE
    CONST
    CONTINUE
    CRATE
    DIVIDE
    DO
    ELSE
    ENUM
    EQUALS
    EXTERN
    FINAL
    FN
    FOR
    IF
    IMPL
    IN
    INTEGER
    LEFT_MAYUS
    LESSEQUAL_THAN
    LESS_THAN
    LOOP
    MACRO
    MATH_REMINDER
    MINUS
    MOD
    MORE_THAN
    MOV
    NOT_EQUALS
    OFFSETOF
    OR
    OR_BIT
    OVERRIDE
    PLUS
    POINT
    PRIV
    PROC
    PUB
    PURE
    QUO_MARKS
    REF
    RETURN
    RIGHT_MAYUS
    SELF
    SIZEOF
    STATIC
    STRUCT
    SUPER
    TIMES
    TRAIT
    TWO_POINTS
    TYPE
    TYPEOF
    UNSAFE
    UNSIZED
    USE
    VIRTUAL
    WHERE
    WHILE
    XOR_BIT
    YIELD

Grammar

Rule 0     S' -> cuerpo
Rule 1     cuerpo -> asignacion
Rule 2     cuerpo -> asignacionMutable
Rule 3     cuerpo -> eMatch
Rule 4     asignacion -> LET VARIABLE ASSIGN valor COMMA_DOT
Rule 5     valor -> STRING
Rule 6     valor -> CHAR
Rule 7     valor -> DECIMAL
Rule 8     valor -> HEXADECIMAL
Rule 9     valor -> OCTAL
Rule 10    valor -> BINARIO
Rule 11    valor -> BOOL
Rule 12    valor -> FLOAT
Rule 13    eMatch -> MATCH VARIABLE LKEY content RKEY
Rule 14    content -> valor MOREEQUAL_THAN instruccion
Rule 15    content -> valor MOREEQUAL_THAN instruccion COMA content
Rule 16    instruccion -> imprimir
Rule 17    imprimir -> PRINTLN NOT LPAREN valor RPAREN
Rule 18    asignacionMutable -> LET MUT VARIABLE ASSIGN valor COMMA_DOT

Terminals, with rules where they appear

ABSTRACT             : 
ALIGNOF              : 
AND                  : 
AND_BIT              : 
AS                   : 
ASSIGN               : 4 18
BECOME               : 
BINARIO              : 10
BOOL                 : 11
BOX                  : 
BREAK                : 
BYTE                 : 
CHAR                 : 6
COMA                 : 15
COMMA_DOT            : 4 18
CONST                : 
CONTINUE             : 
CRATE                : 
DECIMAL              : 7
DIVIDE               : 
DO                   : 
ELSE                 : 
ENUM                 : 
EQUALS               : 
EXTERN               : 
FINAL                : 
FLOAT                : 12
FN                   : 
FOR                  : 
HEXADECIMAL          : 8
IF                   : 
IMPL                 : 
IN                   : 
INTEGER              : 
LEFT_MAYUS           : 
LESSEQUAL_THAN       : 
LESS_THAN            : 
LET                  : 4 18
LKEY                 : 13
LOOP                 : 
LPAREN               : 17
MACRO                : 
MATCH                : 13
MATH_REMINDER        : 
MINUS                : 
MOD                  : 
MOREEQUAL_THAN       : 14 15
MORE_THAN            : 
MOV                  : 
MUT                  : 18
NOT                  : 17
NOT_EQUALS           : 
OCTAL                : 9
OFFSETOF             : 
OR                   : 
OR_BIT               : 
OVERRIDE             : 
PLUS                 : 
POINT                : 
PRINTLN              : 17
PRIV                 : 
PROC                 : 
PUB                  : 
PURE                 : 
QUO_MARKS            : 
REF                  : 
RETURN               : 
RIGHT_MAYUS          : 
RKEY                 : 13
RPAREN               : 17
SELF                 : 
SIZEOF               : 
STATIC               : 
STRING               : 5
STRUCT               : 
SUPER                : 
TIMES                : 
TRAIT                : 
TWO_POINTS           : 
TYPE                 : 
TYPEOF               : 
UNSAFE               : 
UNSIZED              : 
USE                  : 
VARIABLE             : 4 13 18
VIRTUAL              : 
WHERE                : 
WHILE                : 
XOR_BIT              : 
YIELD                : 
error                : 

Nonterminals, with rules where they appear

asignacion           : 1
asignacionMutable    : 2
content              : 13 15
cuerpo               : 0
eMatch               : 3
imprimir             : 16
instruccion          : 14 15
valor                : 4 14 15 17 18

Parsing method: LALR

state 0

    (0) S' -> . cuerpo
    (1) cuerpo -> . asignacion
    (2) cuerpo -> . asignacionMutable
    (3) cuerpo -> . eMatch
    (4) asignacion -> . LET VARIABLE ASSIGN valor COMMA_DOT
    (18) asignacionMutable -> . LET MUT VARIABLE ASSIGN valor COMMA_DOT
    (13) eMatch -> . MATCH VARIABLE LKEY content RKEY

    LET             shift and go to state 5
    MATCH           shift and go to state 6

    cuerpo                         shift and go to state 1
    asignacion                     shift and go to state 2
    asignacionMutable              shift and go to state 3
    eMatch                         shift and go to state 4

state 1

    (0) S' -> cuerpo .



state 2

    (1) cuerpo -> asignacion .

    $end            reduce using rule 1 (cuerpo -> asignacion .)


state 3

    (2) cuerpo -> asignacionMutable .

    $end            reduce using rule 2 (cuerpo -> asignacionMutable .)


state 4

    (3) cuerpo -> eMatch .

    $end            reduce using rule 3 (cuerpo -> eMatch .)


state 5

    (4) asignacion -> LET . VARIABLE ASSIGN valor COMMA_DOT
    (18) asignacionMutable -> LET . MUT VARIABLE ASSIGN valor COMMA_DOT

    VARIABLE        shift and go to state 7
    MUT             shift and go to state 8


state 6

    (13) eMatch -> MATCH . VARIABLE LKEY content RKEY

    VARIABLE        shift and go to state 9


state 7

    (4) asignacion -> LET VARIABLE . ASSIGN valor COMMA_DOT

    ASSIGN          shift and go to state 10


state 8

    (18) asignacionMutable -> LET MUT . VARIABLE ASSIGN valor COMMA_DOT

    VARIABLE        shift and go to state 11


state 9

    (13) eMatch -> MATCH VARIABLE . LKEY content RKEY

    LKEY            shift and go to state 12


state 10

    (4) asignacion -> LET VARIABLE ASSIGN . valor COMMA_DOT
    (5) valor -> . STRING
    (6) valor -> . CHAR
    (7) valor -> . DECIMAL
    (8) valor -> . HEXADECIMAL
    (9) valor -> . OCTAL
    (10) valor -> . BINARIO
    (11) valor -> . BOOL
    (12) valor -> . FLOAT

    STRING          shift and go to state 14
    CHAR            shift and go to state 15
    DECIMAL         shift and go to state 16
    HEXADECIMAL     shift and go to state 17
    OCTAL           shift and go to state 18
    BINARIO         shift and go to state 19
    BOOL            shift and go to state 20
    FLOAT           shift and go to state 21

    valor                          shift and go to state 13

state 11

    (18) asignacionMutable -> LET MUT VARIABLE . ASSIGN valor COMMA_DOT

    ASSIGN          shift and go to state 22


state 12

    (13) eMatch -> MATCH VARIABLE LKEY . content RKEY
    (14) content -> . valor MOREEQUAL_THAN instruccion
    (15) content -> . valor MOREEQUAL_THAN instruccion COMA content
    (5) valor -> . STRING
    (6) valor -> . CHAR
    (7) valor -> . DECIMAL
    (8) valor -> . HEXADECIMAL
    (9) valor -> . OCTAL
    (10) valor -> . BINARIO
    (11) valor -> . BOOL
    (12) valor -> . FLOAT

    STRING          shift and go to state 14
    CHAR            shift and go to state 15
    DECIMAL         shift and go to state 16
    HEXADECIMAL     shift and go to state 17
    OCTAL           shift and go to state 18
    BINARIO         shift and go to state 19
    BOOL            shift and go to state 20
    FLOAT           shift and go to state 21

    content                        shift and go to state 23
    valor                          shift and go to state 24

state 13

    (4) asignacion -> LET VARIABLE ASSIGN valor . COMMA_DOT

    COMMA_DOT       shift and go to state 25


state 14

    (5) valor -> STRING .

    COMMA_DOT       reduce using rule 5 (valor -> STRING .)
    MOREEQUAL_THAN  reduce using rule 5 (valor -> STRING .)
    RPAREN          reduce using rule 5 (valor -> STRING .)


state 15

    (6) valor -> CHAR .

    COMMA_DOT       reduce using rule 6 (valor -> CHAR .)
    MOREEQUAL_THAN  reduce using rule 6 (valor -> CHAR .)
    RPAREN          reduce using rule 6 (valor -> CHAR .)


state 16

    (7) valor -> DECIMAL .

    COMMA_DOT       reduce using rule 7 (valor -> DECIMAL .)
    MOREEQUAL_THAN  reduce using rule 7 (valor -> DECIMAL .)
    RPAREN          reduce using rule 7 (valor -> DECIMAL .)


state 17

    (8) valor -> HEXADECIMAL .

    COMMA_DOT       reduce using rule 8 (valor -> HEXADECIMAL .)
    MOREEQUAL_THAN  reduce using rule 8 (valor -> HEXADECIMAL .)
    RPAREN          reduce using rule 8 (valor -> HEXADECIMAL .)


state 18

    (9) valor -> OCTAL .

    COMMA_DOT       reduce using rule 9 (valor -> OCTAL .)
    MOREEQUAL_THAN  reduce using rule 9 (valor -> OCTAL .)
    RPAREN          reduce using rule 9 (valor -> OCTAL .)


state 19

    (10) valor -> BINARIO .

    COMMA_DOT       reduce using rule 10 (valor -> BINARIO .)
    MOREEQUAL_THAN  reduce using rule 10 (valor -> BINARIO .)
    RPAREN          reduce using rule 10 (valor -> BINARIO .)


state 20

    (11) valor -> BOOL .

    COMMA_DOT       reduce using rule 11 (valor -> BOOL .)
    MOREEQUAL_THAN  reduce using rule 11 (valor -> BOOL .)
    RPAREN          reduce using rule 11 (valor -> BOOL .)


state 21

    (12) valor -> FLOAT .

    COMMA_DOT       reduce using rule 12 (valor -> FLOAT .)
    MOREEQUAL_THAN  reduce using rule 12 (valor -> FLOAT .)
    RPAREN          reduce using rule 12 (valor -> FLOAT .)


state 22

    (18) asignacionMutable -> LET MUT VARIABLE ASSIGN . valor COMMA_DOT
    (5) valor -> . STRING
    (6) valor -> . CHAR
    (7) valor -> . DECIMAL
    (8) valor -> . HEXADECIMAL
    (9) valor -> . OCTAL
    (10) valor -> . BINARIO
    (11) valor -> . BOOL
    (12) valor -> . FLOAT

    STRING          shift and go to state 14
    CHAR            shift and go to state 15
    DECIMAL         shift and go to state 16
    HEXADECIMAL     shift and go to state 17
    OCTAL           shift and go to state 18
    BINARIO         shift and go to state 19
    BOOL            shift and go to state 20
    FLOAT           shift and go to state 21

    valor                          shift and go to state 26

state 23

    (13) eMatch -> MATCH VARIABLE LKEY content . RKEY

    RKEY            shift and go to state 27


state 24

    (14) content -> valor . MOREEQUAL_THAN instruccion
    (15) content -> valor . MOREEQUAL_THAN instruccion COMA content

    MOREEQUAL_THAN  shift and go to state 28


state 25

    (4) asignacion -> LET VARIABLE ASSIGN valor COMMA_DOT .

    $end            reduce using rule 4 (asignacion -> LET VARIABLE ASSIGN valor COMMA_DOT .)


state 26

    (18) asignacionMutable -> LET MUT VARIABLE ASSIGN valor . COMMA_DOT

    COMMA_DOT       shift and go to state 29


state 27

    (13) eMatch -> MATCH VARIABLE LKEY content RKEY .

    $end            reduce using rule 13 (eMatch -> MATCH VARIABLE LKEY content RKEY .)


state 28

    (14) content -> valor MOREEQUAL_THAN . instruccion
    (15) content -> valor MOREEQUAL_THAN . instruccion COMA content
    (16) instruccion -> . imprimir
    (17) imprimir -> . PRINTLN NOT LPAREN valor RPAREN

    PRINTLN         shift and go to state 32

    instruccion                    shift and go to state 30
    imprimir                       shift and go to state 31

state 29

    (18) asignacionMutable -> LET MUT VARIABLE ASSIGN valor COMMA_DOT .

    $end            reduce using rule 18 (asignacionMutable -> LET MUT VARIABLE ASSIGN valor COMMA_DOT .)


state 30

    (14) content -> valor MOREEQUAL_THAN instruccion .
    (15) content -> valor MOREEQUAL_THAN instruccion . COMA content

    RKEY            reduce using rule 14 (content -> valor MOREEQUAL_THAN instruccion .)
    COMA            shift and go to state 33


state 31

    (16) instruccion -> imprimir .

    COMA            reduce using rule 16 (instruccion -> imprimir .)
    RKEY            reduce using rule 16 (instruccion -> imprimir .)


state 32

    (17) imprimir -> PRINTLN . NOT LPAREN valor RPAREN

    NOT             shift and go to state 34


state 33

    (15) content -> valor MOREEQUAL_THAN instruccion COMA . content
    (14) content -> . valor MOREEQUAL_THAN instruccion
    (15) content -> . valor MOREEQUAL_THAN instruccion COMA content
    (5) valor -> . STRING
    (6) valor -> . CHAR
    (7) valor -> . DECIMAL
    (8) valor -> . HEXADECIMAL
    (9) valor -> . OCTAL
    (10) valor -> . BINARIO
    (11) valor -> . BOOL
    (12) valor -> . FLOAT

    STRING          shift and go to state 14
    CHAR            shift and go to state 15
    DECIMAL         shift and go to state 16
    HEXADECIMAL     shift and go to state 17
    OCTAL           shift and go to state 18
    BINARIO         shift and go to state 19
    BOOL            shift and go to state 20
    FLOAT           shift and go to state 21

    valor                          shift and go to state 24
    content                        shift and go to state 35

state 34

    (17) imprimir -> PRINTLN NOT . LPAREN valor RPAREN

    LPAREN          shift and go to state 36


state 35

    (15) content -> valor MOREEQUAL_THAN instruccion COMA content .

    RKEY            reduce using rule 15 (content -> valor MOREEQUAL_THAN instruccion COMA content .)


state 36

    (17) imprimir -> PRINTLN NOT LPAREN . valor RPAREN
    (5) valor -> . STRING
    (6) valor -> . CHAR
    (7) valor -> . DECIMAL
    (8) valor -> . HEXADECIMAL
    (9) valor -> . OCTAL
    (10) valor -> . BINARIO
    (11) valor -> . BOOL
    (12) valor -> . FLOAT

    STRING          shift and go to state 14
    CHAR            shift and go to state 15
    DECIMAL         shift and go to state 16
    HEXADECIMAL     shift and go to state 17
    OCTAL           shift and go to state 18
    BINARIO         shift and go to state 19
    BOOL            shift and go to state 20
    FLOAT           shift and go to state 21

    valor                          shift and go to state 37

state 37

    (17) imprimir -> PRINTLN NOT LPAREN valor . RPAREN

    RPAREN          shift and go to state 38


state 38

    (17) imprimir -> PRINTLN NOT LPAREN valor RPAREN .

    COMA            reduce using rule 17 (imprimir -> PRINTLN NOT LPAREN valor RPAREN .)
    RKEY            reduce using rule 17 (imprimir -> PRINTLN NOT LPAREN valor RPAREN .)

