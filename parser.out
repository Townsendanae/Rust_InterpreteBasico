Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    ALIGNOF
    AND
    AND_BIT
    AS
    BECOME
    BOX
    BREAK
    BYTE
    CONST
    CONTINUE
    CRATE
    DIVIDE
    DO
    ELSE
    ENUM
    EQUALS
    EXTERN
    FINAL
    FN
    FOR
    IF
    IMPL
    IN
    INTEGER
    LEFT_MAYUS
    LESSEQUAL_THAN
    LESS_THAN
    LOOP
    MACRO
    MATH_REMINDER
    MINUS
    MOD
    MORE_THAN
    MOV
    NOT_EQUALS
    OFFSETOF
    OR
    OR_BIT
    OVERRIDE
    PLUS
    POINT
    PRIV
    PROC
    PUB
    PURE
    QUO_MARKS
    REF
    RETURN
    RIGHT_MAYUS
    SELF
    SIZEOF
    STATIC
    STRUCT
    SUPER
    TIMES
    TRAIT
    TYPE
    TYPEOF
    UNSAFE
    UNSIZED
    USE
    VIRTUAL
    WHERE
    WHILE
    XOR_BIT
    YIELD

Grammar

Rule 0     S' -> cuerpo
Rule 1     cuerpo -> asignacion
Rule 2     cuerpo -> asignacionMutable
Rule 3     cuerpo -> eMatch
Rule 4     cuerpo -> instruccion
Rule 5     asignacion -> LET VARIABLE ASSIGN valor COMMA_DOT
Rule 6     valor -> STRING
Rule 7     valor -> CHAR
Rule 8     valor -> DECIMAL
Rule 9     valor -> HEXADECIMAL
Rule 10    valor -> OCTAL
Rule 11    valor -> BINARIO
Rule 12    valor -> BOOL
Rule 13    valor -> FLOAT
Rule 14    eMatch -> MATCH VARIABLE LKEY content RKEY
Rule 15    content -> valor MOREEQUAL_THAN instruccion
Rule 16    content -> valor MOREEQUAL_THAN instruccion COMA content
Rule 17    instruccion -> imprimir
Rule 18    instruccion -> hashMap
Rule 19    imprimir -> PRINTLN NOT LPAREN valor RPAREN
Rule 20    hashMap -> LET MUT VARIABLE ASSIGN HASHMAP TWO_POINTS TWO_POINTS NEW LPAREN RPAREN COMMA_DOT
Rule 21    asignacionMutable -> LET MUT VARIABLE ASSIGN valor COMMA_DOT

Terminals, with rules where they appear

ABSTRACT             : 
ALIGNOF              : 
AND                  : 
AND_BIT              : 
AS                   : 
ASSIGN               : 5 20 21
BECOME               : 
BINARIO              : 11
BOOL                 : 12
BOX                  : 
BREAK                : 
BYTE                 : 
CHAR                 : 7
COMA                 : 16
COMMA_DOT            : 5 20 21
CONST                : 
CONTINUE             : 
CRATE                : 
DECIMAL              : 8
DIVIDE               : 
DO                   : 
ELSE                 : 
ENUM                 : 
EQUALS               : 
EXTERN               : 
FINAL                : 
FLOAT                : 13
FN                   : 
FOR                  : 
HASHMAP              : 20
HEXADECIMAL          : 9
IF                   : 
IMPL                 : 
IN                   : 
INTEGER              : 
LEFT_MAYUS           : 
LESSEQUAL_THAN       : 
LESS_THAN            : 
LET                  : 5 20 21
LKEY                 : 14
LOOP                 : 
LPAREN               : 19 20
MACRO                : 
MATCH                : 14
MATH_REMINDER        : 
MINUS                : 
MOD                  : 
MOREEQUAL_THAN       : 15 16
MORE_THAN            : 
MOV                  : 
MUT                  : 20 21
NEW                  : 20
NOT                  : 19
NOT_EQUALS           : 
OCTAL                : 10
OFFSETOF             : 
OR                   : 
OR_BIT               : 
OVERRIDE             : 
PLUS                 : 
POINT                : 
PRINTLN              : 19
PRIV                 : 
PROC                 : 
PUB                  : 
PURE                 : 
QUO_MARKS            : 
REF                  : 
RETURN               : 
RIGHT_MAYUS          : 
RKEY                 : 14
RPAREN               : 19 20
SELF                 : 
SIZEOF               : 
STATIC               : 
STRING               : 6
STRUCT               : 
SUPER                : 
TIMES                : 
TRAIT                : 
TWO_POINTS           : 20 20
TYPE                 : 
TYPEOF               : 
UNSAFE               : 
UNSIZED              : 
USE                  : 
VARIABLE             : 5 14 20 21
VIRTUAL              : 
WHERE                : 
WHILE                : 
XOR_BIT              : 
YIELD                : 
error                : 

Nonterminals, with rules where they appear

asignacion           : 1
asignacionMutable    : 2
content              : 14 16
cuerpo               : 0
eMatch               : 3
hashMap              : 18
imprimir             : 17
instruccion          : 4 15 16
valor                : 5 15 16 19 21

Parsing method: LALR

state 0

    (0) S' -> . cuerpo
    (1) cuerpo -> . asignacion
    (2) cuerpo -> . asignacionMutable
    (3) cuerpo -> . eMatch
    (4) cuerpo -> . instruccion
    (5) asignacion -> . LET VARIABLE ASSIGN valor COMMA_DOT
    (21) asignacionMutable -> . LET MUT VARIABLE ASSIGN valor COMMA_DOT
    (14) eMatch -> . MATCH VARIABLE LKEY content RKEY
    (17) instruccion -> . imprimir
    (18) instruccion -> . hashMap
    (19) imprimir -> . PRINTLN NOT LPAREN valor RPAREN
    (20) hashMap -> . LET MUT VARIABLE ASSIGN HASHMAP TWO_POINTS TWO_POINTS NEW LPAREN RPAREN COMMA_DOT

    LET             shift and go to state 6
    MATCH           shift and go to state 7
    PRINTLN         shift and go to state 10

    cuerpo                         shift and go to state 1
    asignacion                     shift and go to state 2
    asignacionMutable              shift and go to state 3
    eMatch                         shift and go to state 4
    instruccion                    shift and go to state 5
    imprimir                       shift and go to state 8
    hashMap                        shift and go to state 9

state 1

    (0) S' -> cuerpo .



state 2

    (1) cuerpo -> asignacion .

    $end            reduce using rule 1 (cuerpo -> asignacion .)


state 3

    (2) cuerpo -> asignacionMutable .

    $end            reduce using rule 2 (cuerpo -> asignacionMutable .)


state 4

    (3) cuerpo -> eMatch .

    $end            reduce using rule 3 (cuerpo -> eMatch .)


state 5

    (4) cuerpo -> instruccion .

    $end            reduce using rule 4 (cuerpo -> instruccion .)


state 6

    (5) asignacion -> LET . VARIABLE ASSIGN valor COMMA_DOT
    (21) asignacionMutable -> LET . MUT VARIABLE ASSIGN valor COMMA_DOT
    (20) hashMap -> LET . MUT VARIABLE ASSIGN HASHMAP TWO_POINTS TWO_POINTS NEW LPAREN RPAREN COMMA_DOT

    VARIABLE        shift and go to state 11
    MUT             shift and go to state 12


state 7

    (14) eMatch -> MATCH . VARIABLE LKEY content RKEY

    VARIABLE        shift and go to state 13


state 8

    (17) instruccion -> imprimir .

    $end            reduce using rule 17 (instruccion -> imprimir .)
    COMA            reduce using rule 17 (instruccion -> imprimir .)
    RKEY            reduce using rule 17 (instruccion -> imprimir .)


state 9

    (18) instruccion -> hashMap .

    $end            reduce using rule 18 (instruccion -> hashMap .)
    COMA            reduce using rule 18 (instruccion -> hashMap .)
    RKEY            reduce using rule 18 (instruccion -> hashMap .)


state 10

    (19) imprimir -> PRINTLN . NOT LPAREN valor RPAREN

    NOT             shift and go to state 14


state 11

    (5) asignacion -> LET VARIABLE . ASSIGN valor COMMA_DOT

    ASSIGN          shift and go to state 15


state 12

    (21) asignacionMutable -> LET MUT . VARIABLE ASSIGN valor COMMA_DOT
    (20) hashMap -> LET MUT . VARIABLE ASSIGN HASHMAP TWO_POINTS TWO_POINTS NEW LPAREN RPAREN COMMA_DOT

    VARIABLE        shift and go to state 16


state 13

    (14) eMatch -> MATCH VARIABLE . LKEY content RKEY

    LKEY            shift and go to state 17


state 14

    (19) imprimir -> PRINTLN NOT . LPAREN valor RPAREN

    LPAREN          shift and go to state 18


state 15

    (5) asignacion -> LET VARIABLE ASSIGN . valor COMMA_DOT
    (6) valor -> . STRING
    (7) valor -> . CHAR
    (8) valor -> . DECIMAL
    (9) valor -> . HEXADECIMAL
    (10) valor -> . OCTAL
    (11) valor -> . BINARIO
    (12) valor -> . BOOL
    (13) valor -> . FLOAT

    STRING          shift and go to state 20
    CHAR            shift and go to state 21
    DECIMAL         shift and go to state 22
    HEXADECIMAL     shift and go to state 23
    OCTAL           shift and go to state 24
    BINARIO         shift and go to state 25
    BOOL            shift and go to state 26
    FLOAT           shift and go to state 27

    valor                          shift and go to state 19

state 16

    (21) asignacionMutable -> LET MUT VARIABLE . ASSIGN valor COMMA_DOT
    (20) hashMap -> LET MUT VARIABLE . ASSIGN HASHMAP TWO_POINTS TWO_POINTS NEW LPAREN RPAREN COMMA_DOT

    ASSIGN          shift and go to state 28


state 17

    (14) eMatch -> MATCH VARIABLE LKEY . content RKEY
    (15) content -> . valor MOREEQUAL_THAN instruccion
    (16) content -> . valor MOREEQUAL_THAN instruccion COMA content
    (6) valor -> . STRING
    (7) valor -> . CHAR
    (8) valor -> . DECIMAL
    (9) valor -> . HEXADECIMAL
    (10) valor -> . OCTAL
    (11) valor -> . BINARIO
    (12) valor -> . BOOL
    (13) valor -> . FLOAT

    STRING          shift and go to state 20
    CHAR            shift and go to state 21
    DECIMAL         shift and go to state 22
    HEXADECIMAL     shift and go to state 23
    OCTAL           shift and go to state 24
    BINARIO         shift and go to state 25
    BOOL            shift and go to state 26
    FLOAT           shift and go to state 27

    content                        shift and go to state 29
    valor                          shift and go to state 30

state 18

    (19) imprimir -> PRINTLN NOT LPAREN . valor RPAREN
    (6) valor -> . STRING
    (7) valor -> . CHAR
    (8) valor -> . DECIMAL
    (9) valor -> . HEXADECIMAL
    (10) valor -> . OCTAL
    (11) valor -> . BINARIO
    (12) valor -> . BOOL
    (13) valor -> . FLOAT

    STRING          shift and go to state 20
    CHAR            shift and go to state 21
    DECIMAL         shift and go to state 22
    HEXADECIMAL     shift and go to state 23
    OCTAL           shift and go to state 24
    BINARIO         shift and go to state 25
    BOOL            shift and go to state 26
    FLOAT           shift and go to state 27

    valor                          shift and go to state 31

state 19

    (5) asignacion -> LET VARIABLE ASSIGN valor . COMMA_DOT

    COMMA_DOT       shift and go to state 32


state 20

    (6) valor -> STRING .

    COMMA_DOT       reduce using rule 6 (valor -> STRING .)
    MOREEQUAL_THAN  reduce using rule 6 (valor -> STRING .)
    RPAREN          reduce using rule 6 (valor -> STRING .)


state 21

    (7) valor -> CHAR .

    COMMA_DOT       reduce using rule 7 (valor -> CHAR .)
    MOREEQUAL_THAN  reduce using rule 7 (valor -> CHAR .)
    RPAREN          reduce using rule 7 (valor -> CHAR .)


state 22

    (8) valor -> DECIMAL .

    COMMA_DOT       reduce using rule 8 (valor -> DECIMAL .)
    MOREEQUAL_THAN  reduce using rule 8 (valor -> DECIMAL .)
    RPAREN          reduce using rule 8 (valor -> DECIMAL .)


state 23

    (9) valor -> HEXADECIMAL .

    COMMA_DOT       reduce using rule 9 (valor -> HEXADECIMAL .)
    MOREEQUAL_THAN  reduce using rule 9 (valor -> HEXADECIMAL .)
    RPAREN          reduce using rule 9 (valor -> HEXADECIMAL .)


state 24

    (10) valor -> OCTAL .

    COMMA_DOT       reduce using rule 10 (valor -> OCTAL .)
    MOREEQUAL_THAN  reduce using rule 10 (valor -> OCTAL .)
    RPAREN          reduce using rule 10 (valor -> OCTAL .)


state 25

    (11) valor -> BINARIO .

    COMMA_DOT       reduce using rule 11 (valor -> BINARIO .)
    MOREEQUAL_THAN  reduce using rule 11 (valor -> BINARIO .)
    RPAREN          reduce using rule 11 (valor -> BINARIO .)


state 26

    (12) valor -> BOOL .

    COMMA_DOT       reduce using rule 12 (valor -> BOOL .)
    MOREEQUAL_THAN  reduce using rule 12 (valor -> BOOL .)
    RPAREN          reduce using rule 12 (valor -> BOOL .)


state 27

    (13) valor -> FLOAT .

    COMMA_DOT       reduce using rule 13 (valor -> FLOAT .)
    MOREEQUAL_THAN  reduce using rule 13 (valor -> FLOAT .)
    RPAREN          reduce using rule 13 (valor -> FLOAT .)


state 28

    (21) asignacionMutable -> LET MUT VARIABLE ASSIGN . valor COMMA_DOT
    (20) hashMap -> LET MUT VARIABLE ASSIGN . HASHMAP TWO_POINTS TWO_POINTS NEW LPAREN RPAREN COMMA_DOT
    (6) valor -> . STRING
    (7) valor -> . CHAR
    (8) valor -> . DECIMAL
    (9) valor -> . HEXADECIMAL
    (10) valor -> . OCTAL
    (11) valor -> . BINARIO
    (12) valor -> . BOOL
    (13) valor -> . FLOAT

    HASHMAP         shift and go to state 34
    STRING          shift and go to state 20
    CHAR            shift and go to state 21
    DECIMAL         shift and go to state 22
    HEXADECIMAL     shift and go to state 23
    OCTAL           shift and go to state 24
    BINARIO         shift and go to state 25
    BOOL            shift and go to state 26
    FLOAT           shift and go to state 27

    valor                          shift and go to state 33

state 29

    (14) eMatch -> MATCH VARIABLE LKEY content . RKEY

    RKEY            shift and go to state 35


state 30

    (15) content -> valor . MOREEQUAL_THAN instruccion
    (16) content -> valor . MOREEQUAL_THAN instruccion COMA content

    MOREEQUAL_THAN  shift and go to state 36


state 31

    (19) imprimir -> PRINTLN NOT LPAREN valor . RPAREN

    RPAREN          shift and go to state 37


state 32

    (5) asignacion -> LET VARIABLE ASSIGN valor COMMA_DOT .

    $end            reduce using rule 5 (asignacion -> LET VARIABLE ASSIGN valor COMMA_DOT .)


state 33

    (21) asignacionMutable -> LET MUT VARIABLE ASSIGN valor . COMMA_DOT

    COMMA_DOT       shift and go to state 38


state 34

    (20) hashMap -> LET MUT VARIABLE ASSIGN HASHMAP . TWO_POINTS TWO_POINTS NEW LPAREN RPAREN COMMA_DOT

    TWO_POINTS      shift and go to state 39


state 35

    (14) eMatch -> MATCH VARIABLE LKEY content RKEY .

    $end            reduce using rule 14 (eMatch -> MATCH VARIABLE LKEY content RKEY .)


state 36

    (15) content -> valor MOREEQUAL_THAN . instruccion
    (16) content -> valor MOREEQUAL_THAN . instruccion COMA content
    (17) instruccion -> . imprimir
    (18) instruccion -> . hashMap
    (19) imprimir -> . PRINTLN NOT LPAREN valor RPAREN
    (20) hashMap -> . LET MUT VARIABLE ASSIGN HASHMAP TWO_POINTS TWO_POINTS NEW LPAREN RPAREN COMMA_DOT

    PRINTLN         shift and go to state 10
    LET             shift and go to state 41

    instruccion                    shift and go to state 40
    imprimir                       shift and go to state 8
    hashMap                        shift and go to state 9

state 37

    (19) imprimir -> PRINTLN NOT LPAREN valor RPAREN .

    $end            reduce using rule 19 (imprimir -> PRINTLN NOT LPAREN valor RPAREN .)
    COMA            reduce using rule 19 (imprimir -> PRINTLN NOT LPAREN valor RPAREN .)
    RKEY            reduce using rule 19 (imprimir -> PRINTLN NOT LPAREN valor RPAREN .)


state 38

    (21) asignacionMutable -> LET MUT VARIABLE ASSIGN valor COMMA_DOT .

    $end            reduce using rule 21 (asignacionMutable -> LET MUT VARIABLE ASSIGN valor COMMA_DOT .)


state 39

    (20) hashMap -> LET MUT VARIABLE ASSIGN HASHMAP TWO_POINTS . TWO_POINTS NEW LPAREN RPAREN COMMA_DOT

    TWO_POINTS      shift and go to state 42


state 40

    (15) content -> valor MOREEQUAL_THAN instruccion .
    (16) content -> valor MOREEQUAL_THAN instruccion . COMA content

    RKEY            reduce using rule 15 (content -> valor MOREEQUAL_THAN instruccion .)
    COMA            shift and go to state 43


state 41

    (20) hashMap -> LET . MUT VARIABLE ASSIGN HASHMAP TWO_POINTS TWO_POINTS NEW LPAREN RPAREN COMMA_DOT

    MUT             shift and go to state 44


state 42

    (20) hashMap -> LET MUT VARIABLE ASSIGN HASHMAP TWO_POINTS TWO_POINTS . NEW LPAREN RPAREN COMMA_DOT

    NEW             shift and go to state 45


state 43

    (16) content -> valor MOREEQUAL_THAN instruccion COMA . content
    (15) content -> . valor MOREEQUAL_THAN instruccion
    (16) content -> . valor MOREEQUAL_THAN instruccion COMA content
    (6) valor -> . STRING
    (7) valor -> . CHAR
    (8) valor -> . DECIMAL
    (9) valor -> . HEXADECIMAL
    (10) valor -> . OCTAL
    (11) valor -> . BINARIO
    (12) valor -> . BOOL
    (13) valor -> . FLOAT

    STRING          shift and go to state 20
    CHAR            shift and go to state 21
    DECIMAL         shift and go to state 22
    HEXADECIMAL     shift and go to state 23
    OCTAL           shift and go to state 24
    BINARIO         shift and go to state 25
    BOOL            shift and go to state 26
    FLOAT           shift and go to state 27

    valor                          shift and go to state 30
    content                        shift and go to state 46

state 44

    (20) hashMap -> LET MUT . VARIABLE ASSIGN HASHMAP TWO_POINTS TWO_POINTS NEW LPAREN RPAREN COMMA_DOT

    VARIABLE        shift and go to state 47


state 45

    (20) hashMap -> LET MUT VARIABLE ASSIGN HASHMAP TWO_POINTS TWO_POINTS NEW . LPAREN RPAREN COMMA_DOT

    LPAREN          shift and go to state 48


state 46

    (16) content -> valor MOREEQUAL_THAN instruccion COMA content .

    RKEY            reduce using rule 16 (content -> valor MOREEQUAL_THAN instruccion COMA content .)


state 47

    (20) hashMap -> LET MUT VARIABLE . ASSIGN HASHMAP TWO_POINTS TWO_POINTS NEW LPAREN RPAREN COMMA_DOT

    ASSIGN          shift and go to state 49


state 48

    (20) hashMap -> LET MUT VARIABLE ASSIGN HASHMAP TWO_POINTS TWO_POINTS NEW LPAREN . RPAREN COMMA_DOT

    RPAREN          shift and go to state 50


state 49

    (20) hashMap -> LET MUT VARIABLE ASSIGN . HASHMAP TWO_POINTS TWO_POINTS NEW LPAREN RPAREN COMMA_DOT

    HASHMAP         shift and go to state 34


state 50

    (20) hashMap -> LET MUT VARIABLE ASSIGN HASHMAP TWO_POINTS TWO_POINTS NEW LPAREN RPAREN . COMMA_DOT

    COMMA_DOT       shift and go to state 51


state 51

    (20) hashMap -> LET MUT VARIABLE ASSIGN HASHMAP TWO_POINTS TWO_POINTS NEW LPAREN RPAREN COMMA_DOT .

    $end            reduce using rule 20 (hashMap -> LET MUT VARIABLE ASSIGN HASHMAP TWO_POINTS TWO_POINTS NEW LPAREN RPAREN COMMA_DOT .)
    COMA            reduce using rule 20 (hashMap -> LET MUT VARIABLE ASSIGN HASHMAP TWO_POINTS TWO_POINTS NEW LPAREN RPAREN COMMA_DOT .)
    RKEY            reduce using rule 20 (hashMap -> LET MUT VARIABLE ASSIGN HASHMAP TWO_POINTS TWO_POINTS NEW LPAREN RPAREN COMMA_DOT .)

