
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT ALIGNOF AND AND_BIT AS ASSIGN BECOME BINARIO BOOL BOX BREAK BYTE CHAR COMA COMMA_DOT CONST CONTINUE CRATE DECIMAL DIVIDE DO ELSE ENUM EQUALS EXTERN FINAL FLOAT FN FOR GENERIC HASHMAP HEXADECIMAL IF IMPL IN INTEGER LBRACKET LEFT_MAYUS LESSEQUAL_THAN LESS_THAN LET LKEY LOOP LPAREN MACRO MATCH MATH_REMINDER MINUS MOD MOREEQUAL_THAN MORE_THAN MOV MUT NEW NOT NOT_EQUALS OCTAL OFFSETOF OR OR_BIT OVERRIDE PLUS POINT PRINTLN PRIV PROC PUB PURE QUO_MARKS RBRACKET REF RETURN RIGHT_MAYUS RKEY RPAREN SELF SIZEOF STATIC STRING STRUCT SUPER TIMES TRAIT TWO_POINTS TYPE TYPEOF UNSAFE UNSIZED USE VARIABLE VEC VIRTUAL WHERE WHILE XOR_BIT YIELDcuerpo : asignacion\n    | definicion\n    | struct\n    | varEnVar\n    asignacion : definicion ASSIGN valorAsignado COMMA_DOT\n    | VARIABLE ASSIGN valorAsignado COMMA_DOT\n    | VARIABLE ASSIGN varEnVar COMMA_DOTvarEnVar : VARIABLE POINT VARIABLEdefinicion : creacion\n    | creacion COMMA_DOT\n    | creacion tipoDatocreacion : LET MUT VARIABLE\n    | LET VARIABLE\n    | CONST VARIABLEtipoDato : TWO_POINTS dato\n    | TWO_POINTS dato tipoDato\n    | LESS_THAN dato MORE_THAN\n    dato : STRING\n    | CHAR\n    | DECIMAL\n    | HEXADECIMAL\n    | OCTAL\n    | BINARIO\n    | BOOL\n    | FLOAT\n    | VEC\n    | GENERICvalorAsignado : dato\n    | llamadaAfuncion\n    | llamadaAfuncionPorAliasllamadaAfuncionPorAlias : VARIABLE POINT llamadaAfuncionllamadaAfuncion : VARIABLE argumentos\n    | VARIABLE argumentos POINT llamadaAfuncion\n    | VARIABLE TWO_POINTS TWO_POINTS argumentosargumentos : LPAREN argumento RPAREN\n    | LPAREN RPARENargumento : VARIABLE\n    | dato\n    | VARIABLE COMA argumento\n    | dato COMA argumento\n    | llamadaAfuncion\n    | llamadaAfuncionPorAlias\n    | llamadaAfuncion COMA argumento\n    | llamadaAfuncionPorAlias COMA argumentostruct : STRUCT VARIABLE LKEY atributos RKEYatributos : VARIABLE TWO_POINTS dato\n    | VARIABLE TWO_POINTS dato COMA atributos'
    
_lr_action_items = {'VARIABLE':([0,8,9,10,11,12,13,19,43,47,49,50,57,73,74,75,76,82,],[6,18,20,21,36,37,40,44,55,58,63,67,58,63,63,63,63,55,]),'STRUCT':([0,],[8,]),'LET':([0,],[9,]),'CONST':([0,],[10,]),'$end':([1,2,3,4,5,7,14,15,20,21,26,27,28,29,30,31,32,33,34,35,40,41,44,45,51,52,53,54,69,],[0,-1,-2,-3,-4,-9,-10,-11,-13,-14,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-8,-15,-12,-5,-6,-7,-16,-17,-45,]),'ASSIGN':([3,6,7,14,15,20,21,26,27,28,29,30,31,32,33,34,35,41,44,53,54,],[11,12,-9,-10,-11,-13,-14,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-15,-12,-16,-17,]),'POINT':([6,36,37,46,62,63,72,],[13,47,50,57,-36,47,-35,]),'COMMA_DOT':([7,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,38,39,44,46,59,62,67,70,71,72,],[14,-13,-14,45,-28,-29,-30,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,51,52,-12,-32,-31,-36,-8,-33,-34,-35,]),'TWO_POINTS':([7,20,21,26,27,28,29,30,31,32,33,34,35,36,37,41,44,48,55,58,63,67,],[16,-13,-14,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,48,48,16,-12,60,68,48,48,48,]),'LESS_THAN':([7,20,21,26,27,28,29,30,31,32,33,34,35,41,44,],[17,-13,-14,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,17,-12,]),'MUT':([9,],[19,]),'STRING':([11,12,16,17,49,68,73,74,75,76,],[26,26,26,26,26,26,26,26,26,26,]),'CHAR':([11,12,16,17,49,68,73,74,75,76,],[27,27,27,27,27,27,27,27,27,27,]),'DECIMAL':([11,12,16,17,49,68,73,74,75,76,],[28,28,28,28,28,28,28,28,28,28,]),'HEXADECIMAL':([11,12,16,17,49,68,73,74,75,76,],[29,29,29,29,29,29,29,29,29,29,]),'OCTAL':([11,12,16,17,49,68,73,74,75,76,],[30,30,30,30,30,30,30,30,30,30,]),'BINARIO':([11,12,16,17,49,68,73,74,75,76,],[31,31,31,31,31,31,31,31,31,31,]),'BOOL':([11,12,16,17,49,68,73,74,75,76,],[32,32,32,32,32,32,32,32,32,32,]),'FLOAT':([11,12,16,17,49,68,73,74,75,76,],[33,33,33,33,33,33,33,33,33,33,]),'VEC':([11,12,16,17,49,68,73,74,75,76,],[34,34,34,34,34,34,34,34,34,34,]),'GENERIC':([11,12,16,17,49,68,73,74,75,76,],[35,35,35,35,35,35,35,35,35,35,]),'LKEY':([18,],[43,]),'MORE_THAN':([26,27,28,29,30,31,32,33,34,35,42,],[-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,54,]),'COMA':([26,27,28,29,30,31,32,33,34,35,46,59,62,63,64,65,66,70,71,72,77,],[-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-32,-31,-36,73,74,75,76,-33,-34,-35,82,]),'RPAREN':([26,27,28,29,30,31,32,33,34,35,46,49,59,61,62,63,64,65,66,70,71,72,78,79,80,81,],[-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-32,62,-31,72,-36,-37,-38,-41,-42,-33,-34,-35,-39,-40,-43,-44,]),'RKEY':([26,27,28,29,30,31,32,33,34,35,56,77,83,],[-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,69,-46,-47,]),'LPAREN':([36,37,58,60,63,67,],[49,49,49,49,49,49,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'cuerpo':([0,],[1,]),'asignacion':([0,],[2,]),'definicion':([0,],[3,]),'struct':([0,],[4,]),'varEnVar':([0,12,],[5,39,]),'creacion':([0,],[7,]),'tipoDato':([7,41,],[15,53,]),'valorAsignado':([11,12,],[22,38,]),'dato':([11,12,16,17,49,68,73,74,75,76,],[23,23,41,42,64,77,64,64,64,64,]),'llamadaAfuncion':([11,12,47,49,50,57,73,74,75,76,],[24,24,59,65,59,70,65,65,65,65,]),'llamadaAfuncionPorAlias':([11,12,49,73,74,75,76,],[25,25,66,66,66,66,66,]),'argumentos':([36,37,58,60,63,67,],[46,46,46,71,46,46,]),'atributos':([43,82,],[56,83,]),'argumento':([49,73,74,75,76,],[61,78,79,80,81,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> cuerpo","S'",1,None,None,None),
  ('cuerpo -> asignacion','cuerpo',1,'p_cuerpo','AnalizadorSintactico.py',174),
  ('cuerpo -> definicion','cuerpo',1,'p_cuerpo','AnalizadorSintactico.py',175),
  ('cuerpo -> struct','cuerpo',1,'p_cuerpo','AnalizadorSintactico.py',176),
  ('cuerpo -> varEnVar','cuerpo',1,'p_cuerpo','AnalizadorSintactico.py',177),
  ('asignacion -> definicion ASSIGN valorAsignado COMMA_DOT','asignacion',4,'p_asignacion','AnalizadorSintactico.py',181),
  ('asignacion -> VARIABLE ASSIGN valorAsignado COMMA_DOT','asignacion',4,'p_asignacion','AnalizadorSintactico.py',182),
  ('asignacion -> VARIABLE ASSIGN varEnVar COMMA_DOT','asignacion',4,'p_asignacion','AnalizadorSintactico.py',183),
  ('varEnVar -> VARIABLE POINT VARIABLE','varEnVar',3,'p_varEnVar','AnalizadorSintactico.py',186),
  ('definicion -> creacion','definicion',1,'p_definicion','AnalizadorSintactico.py',189),
  ('definicion -> creacion COMMA_DOT','definicion',2,'p_definicion','AnalizadorSintactico.py',190),
  ('definicion -> creacion tipoDato','definicion',2,'p_definicion','AnalizadorSintactico.py',191),
  ('creacion -> LET MUT VARIABLE','creacion',3,'p_creacion','AnalizadorSintactico.py',194),
  ('creacion -> LET VARIABLE','creacion',2,'p_creacion','AnalizadorSintactico.py',195),
  ('creacion -> CONST VARIABLE','creacion',2,'p_creacion','AnalizadorSintactico.py',196),
  ('tipoDato -> TWO_POINTS dato','tipoDato',2,'p_tipoDato','AnalizadorSintactico.py',199),
  ('tipoDato -> TWO_POINTS dato tipoDato','tipoDato',3,'p_tipoDato','AnalizadorSintactico.py',200),
  ('tipoDato -> LESS_THAN dato MORE_THAN','tipoDato',3,'p_tipoDato','AnalizadorSintactico.py',201),
  ('dato -> STRING','dato',1,'p_dato','AnalizadorSintactico.py',205),
  ('dato -> CHAR','dato',1,'p_dato','AnalizadorSintactico.py',206),
  ('dato -> DECIMAL','dato',1,'p_dato','AnalizadorSintactico.py',207),
  ('dato -> HEXADECIMAL','dato',1,'p_dato','AnalizadorSintactico.py',208),
  ('dato -> OCTAL','dato',1,'p_dato','AnalizadorSintactico.py',209),
  ('dato -> BINARIO','dato',1,'p_dato','AnalizadorSintactico.py',210),
  ('dato -> BOOL','dato',1,'p_dato','AnalizadorSintactico.py',211),
  ('dato -> FLOAT','dato',1,'p_dato','AnalizadorSintactico.py',212),
  ('dato -> VEC','dato',1,'p_dato','AnalizadorSintactico.py',213),
  ('dato -> GENERIC','dato',1,'p_dato','AnalizadorSintactico.py',214),
  ('valorAsignado -> dato','valorAsignado',1,'p_valorAsignado','AnalizadorSintactico.py',217),
  ('valorAsignado -> llamadaAfuncion','valorAsignado',1,'p_valorAsignado','AnalizadorSintactico.py',218),
  ('valorAsignado -> llamadaAfuncionPorAlias','valorAsignado',1,'p_valorAsignado','AnalizadorSintactico.py',219),
  ('llamadaAfuncionPorAlias -> VARIABLE POINT llamadaAfuncion','llamadaAfuncionPorAlias',3,'p_llamadaAfuncionPorAlias','AnalizadorSintactico.py',222),
  ('llamadaAfuncion -> VARIABLE argumentos','llamadaAfuncion',2,'p_llamadaAfuncion','AnalizadorSintactico.py',225),
  ('llamadaAfuncion -> VARIABLE argumentos POINT llamadaAfuncion','llamadaAfuncion',4,'p_llamadaAfuncion','AnalizadorSintactico.py',226),
  ('llamadaAfuncion -> VARIABLE TWO_POINTS TWO_POINTS argumentos','llamadaAfuncion',4,'p_llamadaAfuncion','AnalizadorSintactico.py',227),
  ('argumentos -> LPAREN argumento RPAREN','argumentos',3,'p_argumentos','AnalizadorSintactico.py',230),
  ('argumentos -> LPAREN RPAREN','argumentos',2,'p_argumentos','AnalizadorSintactico.py',231),
  ('argumento -> VARIABLE','argumento',1,'p_argumento','AnalizadorSintactico.py',234),
  ('argumento -> dato','argumento',1,'p_argumento','AnalizadorSintactico.py',235),
  ('argumento -> VARIABLE COMA argumento','argumento',3,'p_argumento','AnalizadorSintactico.py',236),
  ('argumento -> dato COMA argumento','argumento',3,'p_argumento','AnalizadorSintactico.py',237),
  ('argumento -> llamadaAfuncion','argumento',1,'p_argumento','AnalizadorSintactico.py',238),
  ('argumento -> llamadaAfuncionPorAlias','argumento',1,'p_argumento','AnalizadorSintactico.py',239),
  ('argumento -> llamadaAfuncion COMA argumento','argumento',3,'p_argumento','AnalizadorSintactico.py',240),
  ('argumento -> llamadaAfuncionPorAlias COMA argumento','argumento',3,'p_argumento','AnalizadorSintactico.py',241),
  ('struct -> STRUCT VARIABLE LKEY atributos RKEY','struct',5,'p_struct','AnalizadorSintactico.py',244),
  ('atributos -> VARIABLE TWO_POINTS dato','atributos',3,'p_atributos','AnalizadorSintactico.py',247),
  ('atributos -> VARIABLE TWO_POINTS dato COMA atributos','atributos',5,'p_atributos','AnalizadorSintactico.py',248),
]
